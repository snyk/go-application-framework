// Package local_models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package local_models

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BusinessCriticalityRiskFactorFactor.
const (
	BusinessCriticality BusinessCriticalityRiskFactorFactor = "business-criticality"
)

// Defines values for BusinessCriticalityRiskFactorValue.
const (
	BusinessCriticalityRiskFactorValueHigh   BusinessCriticalityRiskFactorValue = "high"
	BusinessCriticalityRiskFactorValueLow    BusinessCriticalityRiskFactorValue = "low"
	BusinessCriticalityRiskFactorValueMedium BusinessCriticalityRiskFactorValue = "medium"
)

// Defines values for CodeSastFingerprintV0Scheme.
const (
	CodeSastV0 CodeSastFingerprintV0Scheme = "code-sast-v0"
)

// Defines values for CodeSastFingerprintV1Scheme.
const (
	CodeSastV1 CodeSastFingerprintV1Scheme = "code-sast-v1"
)

// Defines values for ContentAddressInputType.
const (
	ContentAddressInputTypeContentAddress ContentAddressInputType = "content-address"
)

// Defines values for CreateTestContextSdlcStage.
const (
	CreateTestContextSdlcStageCicd      CreateTestContextSdlcStage = "cicd"
	CreateTestContextSdlcStageDev       CreateTestContextSdlcStage = "dev"
	CreateTestContextSdlcStagePrcheck   CreateTestContextSdlcStage = "prcheck"
	CreateTestContextSdlcStageRecurring CreateTestContextSdlcStage = "recurring"
)

// Defines values for CvssRiskFactorFactor.
const (
	Cvss CvssRiskFactorFactor = "cvss"
)

// Defines values for EpssRiskFactorFactor.
const (
	Epss EpssRiskFactorFactor = "epss"
)

// Defines values for FileObjectExcludeRuleType.
const (
	File FileObjectExcludeRuleType = "file"
)

// Defines values for FindingAttributesDelta.
const (
	Existing   FindingAttributesDelta = "existing"
	Introduced FindingAttributesDelta = "introduced"
	Removed    FindingAttributesDelta = "removed"
)

// Defines values for FindingRatingSeverityOriginalValue.
const (
	FindingRatingSeverityOriginalValueCritical FindingRatingSeverityOriginalValue = "critical"
	FindingRatingSeverityOriginalValueHigh     FindingRatingSeverityOriginalValue = "high"
	FindingRatingSeverityOriginalValueInfo     FindingRatingSeverityOriginalValue = "info"
	FindingRatingSeverityOriginalValueLow      FindingRatingSeverityOriginalValue = "low"
	FindingRatingSeverityOriginalValueMedium   FindingRatingSeverityOriginalValue = "medium"
	FindingRatingSeverityOriginalValueNone     FindingRatingSeverityOriginalValue = "none"
)

// Defines values for FindingRatingSeverityReason.
const (
	FindingRatingSeverityReasonManual FindingRatingSeverityReason = "manual"
	FindingRatingSeverityReasonOther  FindingRatingSeverityReason = "other"
	FindingRatingSeverityReasonPolicy FindingRatingSeverityReason = "policy"
)

// Defines values for FindingRatingSeverityValue.
const (
	Critical FindingRatingSeverityValue = "critical"
	High     FindingRatingSeverityValue = "high"
	Info     FindingRatingSeverityValue = "info"
	Low      FindingRatingSeverityValue = "low"
	Medium   FindingRatingSeverityValue = "medium"
	None     FindingRatingSeverityValue = "none"
)

// Defines values for FindingRatingSeverityMethod.
const (
	FindingRatingSeverityMethodCVSSv2  FindingRatingSeverityMethod = "CVSSv2"
	FindingRatingSeverityMethodCVSSv3  FindingRatingSeverityMethod = "CVSSv3"
	FindingRatingSeverityMethodCVSSv31 FindingRatingSeverityMethod = "CVSSv31"
	FindingRatingSeverityMethodCVSSv4  FindingRatingSeverityMethod = "CVSSv4"
	FindingRatingSeverityMethodOWASP   FindingRatingSeverityMethod = "OWASP"
	FindingRatingSeverityMethodOther   FindingRatingSeverityMethod = "other"
)

// Defines values for FindingResourceType.
const (
	Findings FindingResourceType = "findings"
)

// Defines values for GitSCMInputType.
const (
	GitScm GitSCMInputType = "git-scm"
)

// Defines values for LegacyDeepcodeBundleAddressScheme.
const (
	DeepcodeBundle LegacyDeepcodeBundleAddressScheme = "deepcode-bundle"
)

// Defines values for OtherObjectExcludeRuleType.
const (
	OtherObjectExcludeRuleTypeOther OtherObjectExcludeRuleType = "other"
)

// Defines values for ScaProblemFingerprintScheme.
const (
	ScaProblem ScaProblemFingerprintScheme = "sca-problem"
)

// Defines values for ScanType.
const (
	ScanTypeOther ScanType = "other"
	ScanTypeSast  ScanType = "sast"
	ScanTypeSca   ScanType = "sca"
)

// Defines values for SuggestedOtherType.
const (
	SuggestedOtherTypeOther SuggestedOtherType = "other"
)

// Defines values for SuggestedPackageUpgradeType.
const (
	PackageUpgrade SuggestedPackageUpgradeType = "package-upgrade"
)

// Defines values for SuggestedPackageUpgradeUpgradeConflicts.
const (
	False SuggestedPackageUpgradeUpgradeConflicts = false
	True  SuggestedPackageUpgradeUpgradeConflicts = true
)

// Defines values for SuppressionKind.
const (
	SuppressionKindIgnored               SuppressionKind = "ignored"
	SuppressionKindOther                 SuppressionKind = "other"
	SuppressionKindPendingIgnoreApproval SuppressionKind = "pending_ignore_approval"
)

// Defines values for TestContextSdlcStage.
const (
	TestContextSdlcStageCicd      TestContextSdlcStage = "cicd"
	TestContextSdlcStageDev       TestContextSdlcStage = "dev"
	TestContextSdlcStageOther     TestContextSdlcStage = "other"
	TestContextSdlcStagePrcheck   TestContextSdlcStage = "prcheck"
	TestContextSdlcStageRecurring TestContextSdlcStage = "recurring"
)

// Defines values for TestExecStatus.
const (
	Done    TestExecStatus = "done"
	Pending TestExecStatus = "pending"
	Running TestExecStatus = "running"
)

// Defines values for TestOutcomeReason.
const (
	Other        TestOutcomeReason = "other"
	PolicyBreach TestOutcomeReason = "policy_breach"
	Timeout      TestOutcomeReason = "timeout"
)

// Defines values for TestOutcomeResult.
const (
	Fail TestOutcomeResult = "fail"
	Pass TestOutcomeResult = "pass"
)

// Defines values for TestResourceType.
const (
	Tests TestResourceType = "tests"
)

// Defines values for VulnerabilityFactRiskFactorFactor.
const (
	VulnerabilityFact VulnerabilityFactRiskFactorFactor = "vulnerability-fact"
)

// Defines values for VulnerabilityInstanceFactRiskFactorFactor.
const (
	VulnerabilityInstanceFact VulnerabilityInstanceFactRiskFactorFactor = "vulnerability-instance-fact"
)

// Defines values for WorkspaceV1AddressScheme.
const (
	WorkspaceV1 WorkspaceV1AddressScheme = "workspace-v1"
)

// Defines values for IoSnykApiCommonJsonApiVersion.
const (
	N10 IoSnykApiCommonJsonApiVersion = "1.0"
)

// BusinessCriticalityRiskFactor defines model for BusinessCriticalityRiskFactor.
type BusinessCriticalityRiskFactor struct {
	Factor BusinessCriticalityRiskFactorFactor `json:"factor"`
	Value  BusinessCriticalityRiskFactorValue  `json:"value"`
}

// BusinessCriticalityRiskFactorFactor defines model for BusinessCriticalityRiskFactor.Factor.
type BusinessCriticalityRiskFactorFactor string

// BusinessCriticalityRiskFactorValue defines model for BusinessCriticalityRiskFactor.Value.
type BusinessCriticalityRiskFactorValue string

// CodeSastFingerprintV0 defines model for CodeSastFingerprintV0.
type CodeSastFingerprintV0 struct {
	Scheme CodeSastFingerprintV0Scheme `json:"scheme"`
	Value  string                      `json:"value"`
}

// CodeSastFingerprintV0Scheme defines model for CodeSastFingerprintV0.Scheme.
type CodeSastFingerprintV0Scheme string

// CodeSastFingerprintV1 defines model for CodeSastFingerprintV1.
type CodeSastFingerprintV1 struct {
	Scheme CodeSastFingerprintV1Scheme `json:"scheme"`
	Value  string                      `json:"value"`
}

// CodeSastFingerprintV1Scheme defines model for CodeSastFingerprintV1.Scheme.
type CodeSastFingerprintV1Scheme string

// Component A Component (as in, software component) is the subject of a security scan.
type Component struct {
	// Name Name of the component. Names are free-form and semantically meaningful in the context of
	// what is being scanned, and how it is being scanned. It may or may not be a file name or path,
	// depending on what is scanned.
	Name string `json:"name"`

	// ScanType Scan type of the component.
	ScanType ScanType `json:"scan_type"`
}

// ContentAddress Content address whence source code can be obtained for scanning.
type ContentAddress struct {
	union json.RawMessage
}

// ContentAddressInput Test input obtained from a source code image, addressed by its content digest.
type ContentAddressInput struct {
	// Spec Content address specification, which defines the target address to test, or a
	// pair of addresses to test for a differential test.
	Spec ContentAddressSpec      `json:"spec"`
	Type ContentAddressInputType `json:"type"`
}

// ContentAddressInputType defines model for ContentAddressInput.Type.
type ContentAddressInputType string

// ContentAddressSpec Content address specification, which defines the target address to test, or a
// pair of addresses to test for a differential test.
type ContentAddressSpec struct {
	// Base Base content for a differential test. When provided,
	// FindingAttributes.delta will be set with respect to the base in results.
	//
	// Otherwise FindingAttributes.delta is left unset.
	Base *ContentAddress `json:"base,omitempty"`

	// Target Target content to be scanned for this security test.
	Target ContentAddress `json:"target"`
}

// CreateExcludeRule CreateExcludeRule defines individual rules for exclusion of files during a test.
// Currently it supports either bare strings as recursive globs, or explicitly
// stated file patterns as recursive globs.
type CreateExcludeRule struct {
	union json.RawMessage
}

// CreateExcludeRule0 defines model for .
type CreateExcludeRule0 = string

// CreateObjectExcludeRule defines model for CreateObjectExcludeRule.
type CreateObjectExcludeRule = FileObjectExcludeRule

// CreateTestAttributes Attributes provided when creating a new test.
type CreateTestAttributes struct {
	// Context Test context; pertinent information important to associate with the outcome
	// of the test and its further processing, but is not directly used in the
	// test.
	//
	// These are worth modeling with a concrete type, rather than as generic
	// free-form metadata to communicate to consumers of the test what values are
	// available.
	Context *CreateTestContext `json:"context,omitempty"`

	// Input Test inputs; what will be tested.
	Input TestInput `json:"input"`

	// Options CreateTestOptions are arguments which configure the test and determine the
	// behavior of how it is conducted.
	//
	// Options are optional when creating a test and may be derived from other
	// sources, such as a test configuration policy if not specified. Provided
	// options may be merged with or overridden by such policy.
	//
	// In the requested Test resource, these options will reflect the effective
	// options resolved and applied to the execution of the test.
	Options *CreateTestOptions `json:"options,omitempty"`
}

// CreateTestContext CreateTestContext identifies the context in which this Test occurs.
type CreateTestContext struct {
	// GitScmBranch Git SCM branch associated with the content, if known.
	//
	// This allows providing the Git SCM branch as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on a feature branch.
	GitScmBranch *string `json:"git_scm_branch,omitempty"`

	// GitScmUrl Git SCM URL associated with the content, if known.
	//
	// This allows providing the Git SCM URL as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on source code which was cloned
	// from, and will be proposed for merging back into, an SCM repository.
	GitScmUrl *string `json:"git_scm_url,omitempty"`

	// SdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
	SdlcStage CreateTestContextSdlcStage `json:"sdlc_stage"`
}

// CreateTestContextSdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
type CreateTestContextSdlcStage string

// CreateTestOptions CreateTestOptions defines options which determine how the Test is conducted.
type CreateTestOptions struct {
	// Exclude Files from which findings should be excluded and removed from
	// results.
	//
	// This is different from FindingAttributes.suppressions; the exclude is an
	// up-front declaration that findings in the excluded files are
	// immaterial to the test result (pass/fail), and should not be reported at all.
	//
	// Excluded files might still be used to link other files/findings though. For
	// example, a SAST (source-to-sink) or SCA analysis (transitive dependency
	// chain) might transit an excluded file, enabling discovery in a
	// non-excluded file.
	Exclude *[]CreateExcludeRule `json:"exclude,omitempty"`
}

// CvssRiskFactor defines model for CvssRiskFactor.
type CvssRiskFactor struct {
	// CvssVersion The CVSS version being described. This will be a published CVSS
	// specification version, such as "3.1" or "4.0"
	CvssVersion string               `json:"cvss_version"`
	Factor      CvssRiskFactorFactor `json:"factor"`

	// Vector CVSS vector string, the format of which may be CVSS specification version
	// dependent.
	//
	// See https://www.first.org/cvss/specification-document#Vector-String for
	// details.
	Vector string `json:"vector"`
}

// CvssRiskFactorFactor defines model for CvssRiskFactor.Factor.
type CvssRiskFactorFactor string

// EpssRiskFactor defines model for EpssRiskFactor.
type EpssRiskFactor struct {
	Factor EpssRiskFactorFactor `json:"factor"`
	Value  float32              `json:"value"`
}

// EpssRiskFactorFactor defines model for EpssRiskFactor.Factor.
type EpssRiskFactorFactor string

// ExcludeRule ExcludeRule defines individual rules for exclusion of files during a test.
// Currently it supports either bare strings as recursive globs, or explicitly
// stated file patterns as recursive globs.
type ExcludeRule struct {
	union json.RawMessage
}

// ExcludeRule0 defines model for .
type ExcludeRule0 = string

// FileObjectExcludeRule defines model for FileObjectExcludeRule.
type FileObjectExcludeRule struct {
	Type FileObjectExcludeRuleType `json:"type"`

	// Value A recursive glob matching files. Equivalent to a bare string.
	Value string `json:"value"`
}

// FileObjectExcludeRuleType defines model for FileObjectExcludeRule.Type.
type FileObjectExcludeRuleType string

// FindingAttributes A Finding entity with a common format for all types of security scans. Notably, this is a sub-resource of a Test.
type FindingAttributes struct {
	// Component Component in which the finding was discovered.
	Component Component `json:"component"`

	// Delta Represent whether a finding is net new (introduced), removed, or preserved
	// in a test involving a diff between inputs.
	//
	// Only set in a differential test conducted with respect to base content.
	Delta *FindingAttributesDelta `json:"delta,omitempty"`

	// Fingerprint Natural key, or fingerprint, to identify the same Finding across multiple
	// Test runs. Unique per Test. Here's why:
	// https://github.com/snyk/pr-experience-poc/blob/main/docs/design-documents/pr-inline-comments.md#why-do-we-need-fingerprints
	Fingerprint Fingerprint `json:"fingerprint"`

	// Locations A set of locations where the result was detected. Only one location should
	// be included unless the finding can only be resolved by making a change at
	// every location.
	Locations *[]FindingLocation `json:"locations,omitempty"`
	Message   struct {
		// Arguments Arguments to the finding rule.
		//
		// Mapped from `sarif.Runs.Results.Message.Arguments`.
		Arguments []string `json:"arguments"`

		// Header Short text description of finding rule.
		//
		// Could be sourced from `sarif.Runs.Tool.Driver.Rules.ShortDescription.Text`.
		Header string `json:"header"`

		// Markdown Markdown description of the finding rule.
		//
		// Mapped from `sarif.Runs.Results.Message.Markdown`.
		Markdown string `json:"markdown"`

		// Text Full text description of the finding rule.
		//
		// Mapped from `sarif.Runs.Results.Message.Text`.
		Text string `json:"text"`
	} `json:"message"`

	// Rating The severity and risk rating of the vulnerability
	Rating *FindingRating `json:"rating,omitempty"`

	// Suggestions Suggestions are indications given to the user that might help with
	// mitigating the finding.
	//
	// For mitigation with a higher degree of confidence, remediation and fix
	// relationship links should be used.
	Suggestions *[]Suggestion `json:"suggestions,omitempty"`

	// Suppression Reasons for why a Finding can be suppressed from a Test result. This MAY NOT be required at all, given the presentation
	Suppression *Suppression `json:"suppression,omitempty"`
}

// FindingAttributesDelta Represent whether a finding is net new (introduced), removed, or preserved
// in a test involving a diff between inputs.
//
// Only set in a differential test conducted with respect to base content.
type FindingAttributesDelta string

// FindingCounts CollectionCounts implements the Snyk REST API standard representation for
// collection counts.
//
// Collection counts may be provided as metadata on a collection resource or in
// an attribute of a parent resource.
//
// See https://snyk.roadie.so/docs/default/component/sweater-comb/standards/rest/#collection-counts.
type FindingCounts = IoSnykApiCommonCollectionCounts

// FindingLocation defines model for FindingLocation.
type FindingLocation struct {
	DependencyPath *[]ScaPackage `json:"dependency_path,omitempty"`

	// SourceLocations Original locations are necessary for "existing" and "removed" findings. Locations should be available for all scan types where possible.
	SourceLocations *FindingSourceLocation `json:"source_locations,omitempty"`
}

// FindingRating The severity and risk rating of the vulnerability
type FindingRating struct {
	// Justification Optional reason for rating the vulnerability like this
	Justification *string      `json:"justification,omitempty"`
	Risk          *FindingRisk `json:"risk,omitempty"`

	// Severity A value which may be modified by enrichment stages.
	Severity struct {
		// OriginalValue Original value, if modified.
		OriginalValue *FindingRatingSeverityOriginalValue `json:"original_value,omitempty"`

		// Reason Reason for the modification, if modified.
		Reason *FindingRatingSeverityReason `json:"reason,omitempty"`

		// Value Current value.
		Value FindingRatingSeverityValue `json:"value"`
	} `json:"severity"`
	SeverityMethod FindingRatingSeverityMethod `json:"severity_method"`
}

// FindingRatingSeverityOriginalValue Original value, if modified.
type FindingRatingSeverityOriginalValue string

// FindingRatingSeverityReason Reason for the modification, if modified.
type FindingRatingSeverityReason string

// FindingRatingSeverityValue Current value.
type FindingRatingSeverityValue string

// FindingRatingSeverityMethod defines model for FindingRating.SeverityMethod.
type FindingRatingSeverityMethod string

// FindingRelationships Resources which may relate to a Finding.
type FindingRelationships struct {
	// Autofixes Relate to autofixes for the finding, if available.
	Autofixes *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"autofixes,omitempty"`

	// Explanation Relate to a human-readable webpage that explains the finding, if available.
	Explanation *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"explanation,omitempty"`

	// FixDetails Relate to fix information for the finding, if available.
	FixDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"fix_details,omitempty"`

	// PolicyModifications Policy modifications applied to this finding, if available.
	PolicyModifications *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"policy_modifications,omitempty"`

	// RawDetails Relate to the raw scan outputs. May be SARIF, CycloneDX+VEX or other
	// scan-specific formats.
	//
	// The relationship link should point to the resource URL where the raw scan
	// output can be retrieved.
	//
	// The link MAY include a URL fragment to locate the finding's position within
	// the document object.
	//
	// For JSON-based MIME types, this fragment MUST be a JSON Pointer.
	// For XML-based MIME types, this fragment MUST be an XPath expression.
	//
	// If the fragment is specified, the fragment form MUST be compatible with all
	// of the content types advertised. For example, the link MUST NOT provide a JSON
	// Pointer fragment if an XML media type is advertised.
	RawDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink           `json:"links"`
		Meta  FindingRelationships_RawDetails_Meta `json:"meta"`
	} `json:"raw_details,omitempty"`

	// Remediations Relate to remediations for the finding, if available.
	Remediations *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"remediations,omitempty"`

	// SastRuleDetails Relate to details about the rule which was violated in a SAST finding.
	SastRuleDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"sast_rule_details,omitempty"`

	// ScaVulnDetails Relate to details about the component vulnerability discovered in the SCA
	// finding.
	ScaVulnDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"sca_vuln_details,omitempty"`
}

// FindingRelationships_RawDetails_Meta defines model for FindingRelationships.RawDetails.Meta.
type FindingRelationships_RawDetails_Meta struct {
	// ContentTypes Content MIME types which can be used in the Accept header when requesting the
	// related raw data.
	//
	// This property must not be empty, making explicit what type of content
	// the API client will be receiving in the raw details resource response.
	ContentTypes         []string               `json:"content_types"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// FindingResource FindingResource models a JSON API Finding resource.
type FindingResource struct {
	// Attributes A Finding entity with a common format for all types of security scans. Notably, this is a sub-resource of a Test.
	Attributes FindingAttributes `json:"attributes"`

	// Id Unique identity of this Finding instance.
	Id openapi_types.UUID `json:"id"`

	// Relationships Resources which may relate to a Finding.
	Relationships FindingRelationships `json:"relationships"`
	Type          FindingResourceType  `json:"type"`
}

// FindingResourceType defines model for FindingResource.Type.
type FindingResourceType string

// FindingRisk defines model for FindingRisk.
type FindingRisk struct {
	Factors RiskFactors `json:"factors"`
	Score   int         `json:"score"`
}

// FindingSourceLocation Original locations are necessary for "existing" and "removed" findings. Locations should be available for all scan types where possible.
type FindingSourceLocation struct {
	// Filepath Maps `sarif.Runs.Results.Location.PhysicalLocation.ArtifactLocation.URI`
	Filepath string `json:"filepath"`

	// OriginalEndColumn Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.EndColumn`
	OriginalEndColumn int `json:"original_end_column"`

	// OriginalEndLine Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.EndLine`
	OriginalEndLine int `json:"original_end_line"`

	// OriginalStartColumn Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.StartColumn`
	OriginalStartColumn int `json:"original_start_column"`

	// OriginalStartLine Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.StartLine`
	OriginalStartLine int `json:"original_start_line"`
}

// FindingsSummary Summary statistics about a Test's Findings.
type FindingsSummary struct {
	Counts FindingCounts `json:"counts"`
}

// Fingerprint defines model for Fingerprint.
type Fingerprint struct {
	union json.RawMessage
}

// GitCommit Git commit SHA.
type GitCommit = string

// GitSCMInput Test input obtained from a Git SCM.
type GitSCMInput struct {
	// Spec Git SCM import specification, which defines how to import content from a Git
	// SCM repository location into a workspace for testing, or a set of workspaces
	// for differential testing.
	Spec GitScmImportSpec `json:"spec"`
	Type GitSCMInputType  `json:"type"`
}

// GitSCMInputType defines model for GitSCMInput.Type.
type GitSCMInputType string

// GitScmImportSpec Git SCM import specification, which defines how to import content from a Git
// SCM repository location into a workspace for testing, or a set of workspaces
// for differential testing.
type GitScmImportSpec struct {
	// Base base is optional. If provided, it is used in supplying differential test data.
	Base *GitCommit `json:"base,omitempty"`

	// Branch branch is optional. If not provided, the default branch is used.
	Branch *string `json:"branch,omitempty"`

	// Exlude Components that should be excluded when importing the SCM contents into a Workspace.
	Exlude *[]ExcludeRule `json:"exlude,omitempty"`

	// RemoteUrl Git SCM repository URL.
	RemoteUrl string `json:"remote_url"`

	// Target target is optional. If not provided the current HEAD of the selected branch is used.
	//
	// If target is provided and branch is not, no branch metadata is associated with the test.
	// If target is provided and branch is, but target is not an ancestor of branch, the wrong
	// branch will be associated with a test. It is the caller's responsibility to ensure this is correct.
	Target *GitCommit `json:"target,omitempty"`
}

// LegacyDeepcodeBundleAddress Legacy Deepcode API bundle.
//
// This is provided provisionally for compatibility purposes.
type LegacyDeepcodeBundleAddress struct {
	// BundleId Legacy Deepcode bundle ID is a sha256 sum (64 hex digits).
	BundleId string                            `json:"bundle_id"`
	Scheme   LegacyDeepcodeBundleAddressScheme `json:"scheme"`
}

// LegacyDeepcodeBundleAddressScheme defines model for LegacyDeepcodeBundleAddress.Scheme.
type LegacyDeepcodeBundleAddressScheme string

// LinkProperty defines model for LinkProperty.
type LinkProperty struct {
	union json.RawMessage
}

// ObjectExcludeRule defines model for ObjectExcludeRule.
type ObjectExcludeRule struct {
	union json.RawMessage
}

// OtherObjectExcludeRule OtherObjectExludeRule is a placeholder expansion value, for when types of exclusion rules
// were used in testing that are not present in the called version of the API.
type OtherObjectExcludeRule struct {
	Type                 OtherObjectExcludeRuleType `json:"type"`
	AdditionalProperties map[string]interface{}     `json:"-"`
}

// OtherObjectExcludeRuleType defines model for OtherObjectExcludeRule.Type.
type OtherObjectExcludeRuleType string

// Package A Package is either a Package URL (pURL) or a decomposed PackageObject
// identifying a software package.
//
// See https://github.com/package-url/purl-spec for more information about
// pURLs.
type Package struct {
	union json.RawMessage
}

// PackageObject PackageObject represents a decomposed Package URL, enriched with a resolved
// package repository root location. This disambiguates public packages from
// private packages in security SCA and remediation.
type PackageObject struct {
	// Meta Free-form metadata about this package.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`

	// Name Package name, possibly with a namespace prefix.
	Name string `json:"name"`

	// Root Package management system root location.
	//
	// If set, isolates the package to a private ecosystem repository.
	//
	// Defaults to "the canonical public ecosystem repository root" for the package ecosystem type.
	Root *string `json:"root,omitempty"`

	// Subpath Sub-package qualifier, if applicable.
	Subpath *string `json:"subpath,omitempty"`

	// Type Package management system or ecosystem type.
	Type string `json:"type"`

	// Version Package version. One would hope this is semver but this generally depends
	// on the ecosystem and its package standards and requirements.
	Version string `json:"version"`
}

// PackageURL Package information represented in Package URL (pURL) form.
type PackageURL = string

// RiskFactors defines model for RiskFactors.
type RiskFactors struct {
	union json.RawMessage
}

// ScaPackage defines model for ScaPackage.
type ScaPackage struct {
	PackageName    string `json:"package_name"`
	PackageVersion string `json:"package_version"`
}

// ScaProblemFingerprint defines model for ScaProblemFingerprint.
type ScaProblemFingerprint struct {
	Scheme ScaProblemFingerprintScheme `json:"scheme"`
	Value  string                      `json:"value"`
}

// ScaProblemFingerprintScheme defines model for ScaProblemFingerprint.Scheme.
type ScaProblemFingerprintScheme string

// ScanType Security scan type. The scan type determines what types of attributes one
// might expect to find in the finding.
type ScanType string

// SuggestedOther SuggestedOther that aren't yet defined in this API version.
type SuggestedOther struct {
	Type                 SuggestedOtherType     `json:"type"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SuggestedOtherType defines model for SuggestedOther.Type.
type SuggestedOtherType string

// SuggestedPackageUpgrade SuggestedPackageUpgrade provides some basic information on how to mitigate an
// SCA finding in a managed package ecosystem with an upgrade.
//
// The upgrade does not take into account other dependency paths to the affected
// package which may have conflicting constraints. The upgrade version may
// introduce other vulnerabilities. This is the main difference between a
// suggestion and a remediation.
//
// For a comprehensive mitigation with satisfiability and security guarantees,
// the remediation relation should be used.
//
// If conflicts are known to exist this may be reported, but the absense of this
// flag should not be taken as a guarantee conflicts will not be encountered. It
// only means the conflict status is unknown.
type SuggestedPackageUpgrade struct {
	// CurrentPackage Affected package.
	CurrentPackage Package                     `json:"current_package"`
	Type           SuggestedPackageUpgradeType `json:"type"`

	// UpgradeConflicts Indicate whether the upgrade version is known to conflict with other
	// dependencies on the same package.
	//
	// If false, the upgrade does not conflict and should be applicable.
	//
	// If null or missing, conflict status is unknown or was not calculated;
	// applying the upgrade could fail.
	UpgradeConflicts *SuggestedPackageUpgradeUpgradeConflicts `json:"upgrade_conflicts"`

	// UpgradePackage Upgrade package in which the vulnerability is no longer present.
	//
	// If unset, no upgrade version is available.
	UpgradePackage *Package `json:"upgrade_package,omitempty"`
}

// SuggestedPackageUpgradeType defines model for SuggestedPackageUpgrade.Type.
type SuggestedPackageUpgradeType string

// SuggestedPackageUpgradeUpgradeConflicts Indicate whether the upgrade version is known to conflict with other
// dependencies on the same package.
//
// If false, the upgrade does not conflict and should be applicable.
//
// If null or missing, conflict status is unknown or was not calculated;
// applying the upgrade could fail.
type SuggestedPackageUpgradeUpgradeConflicts bool

// Suggestion Suggestions are indications given to the user that might help with
// mitigating the finding.
type Suggestion struct {
	union json.RawMessage
}

// Suppression Reasons for why a Finding can be suppressed from a Test result. This MAY NOT be required at all, given the presentation
type Suppression struct {
	Justification *string         `json:"justification,omitempty"`
	Kind          SuppressionKind `json:"kind"`
}

// SuppressionKind defines model for Suppression.Kind.
type SuppressionKind string

// TestContext TestContext identifies the context in which this Test occurs.
type TestContext struct {
	// GitScmBranch Git SCM branch associated with the content, if known.
	//
	// This allows providing the Git SCM branch as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on a feature branch.
	GitScmBranch *string `json:"git_scm_branch,omitempty"`

	// GitScmUrl Git SCM URL associated with the content, if known.
	//
	// This allows providing the Git SCM URL as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on source code which was cloned
	// from, and will be proposed for merging back into, an SCM repository.
	GitScmUrl *string `json:"git_scm_url,omitempty"`

	// SdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
	// `other` is returned if the test was created with a newer version of
	// the API including a new SDLC stage, not supported in the version of
	// the API used for retrieval.
	SdlcStage TestContextSdlcStage `json:"sdlc_stage"`
}

// TestContextSdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
// `other` is returned if the test was created with a newer version of
// the API including a new SDLC stage, not supported in the version of
// the API used for retrieval.
type TestContextSdlcStage string

// TestError An error that occurred during a Test.
type TestError struct {
	// Code Error code, references Snyk error catalog.
	Code string `json:"code"`

	// Links Links to error detail information.
	Links *IoSnykApiCommonErrorLink `json:"links,omitempty"`

	// Meta Free-form metadata associated with the error.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`

	// Reason Descriptive reason for the error.
	Reason *string `json:"reason,omitempty"`
}

// TestExecStatus defines model for TestExecStatus.
type TestExecStatus string

// TestInput TestInput defines what will be tested.
//
// Another term for this might be "test coordinates".
type TestInput struct {
	union json.RawMessage
}

// TestOptions TestOptions defines options which determine how the Test is conducted.
// In includes the fields used in create test options, but in a backwards compatible manner.
type TestOptions struct {
	// Exclude Files from which findings should be excluded and removed from
	// results.
	//
	// This is different from FindingAttributes.suppressions; the exclude is an
	// up-front declaration that findings in the excluded files are
	// immaterial to the test result (pass/fail), and should not be reported at all.
	//
	// Excluded files might still be used to link other files/findings though. For
	// example, a SAST (source-to-sink) or SCA analysis (transitive dependency
	// chain) might transit an excluded file, enabling discovery in a
	// non-excluded file.
	Exclude *[]ExcludeRule `json:"exclude,omitempty"`
}

// TestOutcome The outcome of a Test; pass or fail. It is possible for the Test to show
// failure before the overall status has completed.
type TestOutcome struct {
	Reason *TestOutcomeReason `json:"reason,omitempty"`
	Result TestOutcomeResult  `json:"result"`
}

// TestOutcomeReason defines model for TestOutcome.Reason.
type TestOutcomeReason string

// TestOutcomeResult defines model for TestOutcome.Result.
type TestOutcomeResult string

// TestRelationships Resources related to a test.
type TestRelationships struct {
	// Findings Relationship link to the findings collection for this test.
	Findings struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"findings"`

	// Logs Relate to application-facing logs produced by the test.
	Logs *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"logs,omitempty"`
}

// TestResource TestResource models a JSON API Test resource.
type TestResource struct {
	// Attributes Summary-level attributes of a test.
	Attributes struct {
		// Context Test context; pertinent information important to associate with the outcome
		// of the test and its further processing, but is not directly used in the
		// test.
		//
		// These are worth modeling with a concrete type, rather than as generic
		// free-form metadata to communicate to consumers of the test what values are
		// available.
		Context *TestContext `json:"context,omitempty"`

		// Options TestOptions are arguments which were used to configure the test and determine the
		// behavior of how it is conducted.
		//
		// Options are optional when creating a test and may be derived from other
		// sources, such as a test configuration policy if not specified. Provided
		// options may be merged with or overridden by such policy.
		//
		// In the requested Test resource, these options will reflect the effective
		// options resolved and applied to the execution of the test.
		Options *TestOptions `json:"options,omitempty"`

		// Outcome Overall outcome of the security test: pass or fail.
		//
		// This outcome may indicate failure early even while the test is still
		// running to completion.
		Outcome TestOutcome `json:"outcome"`

		// State State of the test, which should be polled to status "running" or "done"
		// before unmarshaling into this type.
		State TestState `json:"state"`

		// Summary Summary of all the findings discovered by all the security scans conducted
		// for this test.
		Summary FindingsSummary `json:"summary"`
	} `json:"attributes"`

	// Id Test resource ID. A unique ID assigned to each created test.
	Id openapi_types.UUID `json:"id"`

	// Relationships Resources related to a test.
	Relationships TestRelationships `json:"relationships"`

	// Type Test resource type.
	Type TestResourceType `json:"type"`
}

// TestResourceType Test resource type.
type TestResourceType string

// TestState The state of a Test execution. Does not include the pass or fail.
type TestState struct {
	// Errors Errors that occurred during the test execution.
	Errors *TestError `json:"errors,omitempty"`

	// Status Test execution status.
	Status TestExecStatus `json:"status"`
}

// VulnerabilityFactRiskFactor defines model for VulnerabilityFactRiskFactor.
type VulnerabilityFactRiskFactor struct {
	Factor VulnerabilityFactRiskFactorFactor `json:"factor"`
	Name   string                            `json:"name"`
	Value  bool                              `json:"value"`
}

// VulnerabilityFactRiskFactorFactor defines model for VulnerabilityFactRiskFactor.Factor.
type VulnerabilityFactRiskFactorFactor string

// VulnerabilityInstanceFactRiskFactor defines model for VulnerabilityInstanceFactRiskFactor.
type VulnerabilityInstanceFactRiskFactor struct {
	Factor VulnerabilityInstanceFactRiskFactorFactor `json:"factor"`
	Name   string                                    `json:"name"`
	Value  bool                                      `json:"value"`
}

// VulnerabilityInstanceFactRiskFactorFactor defines model for VulnerabilityInstanceFactRiskFactor.Factor.
type VulnerabilityInstanceFactRiskFactorFactor string

// WorkspaceV1Address Workspace v1 content storage address.
//
// TODO: Update this as needed.
type WorkspaceV1Address struct {
	Scheme WorkspaceV1AddressScheme `json:"scheme"`

	// WorkspaceId Workspace v1 is a sha256 sum (64 hex digits).
	WorkspaceId string `json:"workspace_id"`
}

// WorkspaceV1AddressScheme defines model for WorkspaceV1Address.Scheme.
type WorkspaceV1AddressScheme string

// IoSnykApiCommonCollectionCounts CollectionCounts implements the Snyk REST API standard representation for
// collection counts.
//
// Collection counts may be provided as metadata on a collection resource or in
// an attribute of a parent resource.
//
// See https://snyk.roadie.so/docs/default/component/sweater-comb/standards/rest/#collection-counts.
type IoSnykApiCommonCollectionCounts struct {
	// Count Count of all items in the collection.
	Count uint32 `json:"count"`

	// CountBy Counts of items grouped by various dimensions.
	//
	// Outer record key is a well-known grouping dimension of the resource object.
	//
	// Inner record key is a value in that dimension.
	CountBy map[string]map[string]uint32 `json:"count_by"`
}

// IoSnykApiCommonError defines model for io.snyk.api.common.Error.
type IoSnykApiCommonError struct {
	// Code An application-specific error code, expressed as a string value.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Id A unique identifier for this particular occurrence of the problem.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Links A link that leads to further details about this particular occurrance of the problem.
	Links  *IoSnykApiCommonErrorLink `json:"links,omitempty"`
	Meta   *map[string]interface{}   `json:"meta,omitempty"`
	Source *struct {
		Parameter *string `json:"parameter,omitempty"`
		Pointer   *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// Status The HTTP status code applicable to this problem, expressed as a string value.
	Status string `json:"status"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// IoSnykApiCommonErrorDocument defines model for io.snyk.api.common.ErrorDocument.
type IoSnykApiCommonErrorDocument struct {
	Errors  []IoSnykApiCommonError `json:"errors"`
	Jsonapi IoSnykApiCommonJsonApi `json:"jsonapi"`
}

// IoSnykApiCommonErrorLink A link that leads to further details about this particular occurrance of the problem.
type IoSnykApiCommonErrorLink struct {
	About                *LinkProperty           `json:"about,omitempty"`
	AdditionalProperties map[string]LinkProperty `json:"-"`
}

// IoSnykApiCommonJsonApi defines model for io.snyk.api.common.JsonApi.
type IoSnykApiCommonJsonApi struct {
	// Version Version of the JSON API specification this server supports.
	Version IoSnykApiCommonJsonApiVersion `json:"version"`
}

// IoSnykApiCommonJsonApiVersion Version of the JSON API specification this server supports.
type IoSnykApiCommonJsonApiVersion string

// IoSnykApiCommonLinkObject defines model for io.snyk.api.common.LinkObject.
type IoSnykApiCommonLinkObject struct {
	Href IoSnykApiCommonLinkString `json:"href"`

	// Meta Free-form object that may contain non-standard information.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
}

// IoSnykApiCommonLinkString defines model for io.snyk.api.common.LinkString.
type IoSnykApiCommonLinkString = string

// IoSnykApiCommonMeta Free-form object that may contain non-standard information.
type IoSnykApiCommonMeta map[string]interface{}

// IoSnykApiCommonPaginatedLinks defines model for io.snyk.api.common.PaginatedLinks.
type IoSnykApiCommonPaginatedLinks struct {
	First *LinkProperty `json:"first,omitempty"`
	Last  *LinkProperty `json:"last,omitempty"`
	Next  *LinkProperty `json:"next,omitempty"`
	Prev  *LinkProperty `json:"prev,omitempty"`
	Self  *LinkProperty `json:"self,omitempty"`
}

// IoSnykApiCommonRelatedLink defines model for io.snyk.api.common.RelatedLink.
type IoSnykApiCommonRelatedLink struct {
	Related *LinkProperty `json:"related,omitempty"`
}

// OrgIdParam defines model for OrgIdParam.
type OrgIdParam = openapi_types.UUID

// TestIdParam defines model for TestIdParam.
type TestIdParam = openapi_types.UUID

// IoSnykApiRequestPaginatedRequestEndingBefore defines model for io.snyk.api.request.PaginatedRequest.ending_before.
type IoSnykApiRequestPaginatedRequestEndingBefore = string

// IoSnykApiRequestPaginatedRequestLimit defines model for io.snyk.api.request.PaginatedRequest.limit.
type IoSnykApiRequestPaginatedRequestLimit = int8

// IoSnykApiRequestPaginatedRequestStartingAfter defines model for io.snyk.api.request.PaginatedRequest.starting_after.
type IoSnykApiRequestPaginatedRequestStartingAfter = string

// IoSnykApiRequestSnykApiRequestInteractionId defines model for io.snyk.api.request.SnykApiRequest.interactionId.
type IoSnykApiRequestSnykApiRequestInteractionId = string

// IoSnykApiRequestSnykApiRequestRequestId defines model for io.snyk.api.request.SnykApiRequest.requestId.
type IoSnykApiRequestSnykApiRequestRequestId = openapi_types.UUID

// IoSnykApiRequestSnykApiRequestVersion defines model for io.snyk.api.request.SnykApiRequest.version.
type IoSnykApiRequestSnykApiRequestVersion = string

// CreateTestParams defines parameters for CreateTest.
type CreateTestParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// GetTestParams defines parameters for GetTest.
type GetTestParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// ListFindingsParams defines parameters for ListFindings.
type ListFindingsParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// StartingAfter Opaque pagination cursor for forward traversal.
	StartingAfter *IoSnykApiRequestPaginatedRequestStartingAfter `form:"starting_after,omitempty" json:"starting_after,omitempty"`

	// EndingBefore Opaque pagination cursor for reverse traversal.
	EndingBefore *IoSnykApiRequestPaginatedRequestEndingBefore `form:"ending_before,omitempty" json:"ending_before,omitempty"`

	// Limit The number of items to return.
	Limit *IoSnykApiRequestPaginatedRequestLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// CreateTestJSONRequestBody defines body for CreateTest for application/json ContentType.
type CreateTestJSONRequestBody = CreateTestAttributes

// Getter for additional properties for FindingRelationships_RawDetails_Meta. Returns the specified
// element and whether it was found
func (a FindingRelationships_RawDetails_Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for FindingRelationships_RawDetails_Meta
func (a *FindingRelationships_RawDetails_Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for FindingRelationships_RawDetails_Meta to handle AdditionalProperties
func (a *FindingRelationships_RawDetails_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content_types"]; found {
		err = json.Unmarshal(raw, &a.ContentTypes)
		if err != nil {
			return fmt.Errorf("error reading 'content_types': %w", err)
		}
		delete(object, "content_types")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for FindingRelationships_RawDetails_Meta to handle AdditionalProperties
func (a FindingRelationships_RawDetails_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["content_types"], err = json.Marshal(a.ContentTypes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'content_types': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for OtherObjectExcludeRule. Returns the specified
// element and whether it was found
func (a OtherObjectExcludeRule) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for OtherObjectExcludeRule
func (a *OtherObjectExcludeRule) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for OtherObjectExcludeRule to handle AdditionalProperties
func (a *OtherObjectExcludeRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for OtherObjectExcludeRule to handle AdditionalProperties
func (a OtherObjectExcludeRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SuggestedOther. Returns the specified
// element and whether it was found
func (a SuggestedOther) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SuggestedOther
func (a *SuggestedOther) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SuggestedOther to handle AdditionalProperties
func (a *SuggestedOther) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SuggestedOther to handle AdditionalProperties
func (a SuggestedOther) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for IoSnykApiCommonErrorLink. Returns the specified
// element and whether it was found
func (a IoSnykApiCommonErrorLink) Get(fieldName string) (value LinkProperty, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IoSnykApiCommonErrorLink
func (a *IoSnykApiCommonErrorLink) Set(fieldName string, value LinkProperty) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]LinkProperty)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IoSnykApiCommonErrorLink to handle AdditionalProperties
func (a *IoSnykApiCommonErrorLink) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["about"]; found {
		err = json.Unmarshal(raw, &a.About)
		if err != nil {
			return fmt.Errorf("error reading 'about': %w", err)
		}
		delete(object, "about")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]LinkProperty)
		for fieldName, fieldBuf := range object {
			var fieldVal LinkProperty
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IoSnykApiCommonErrorLink to handle AdditionalProperties
func (a IoSnykApiCommonErrorLink) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.About != nil {
		object["about"], err = json.Marshal(a.About)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'about': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsLegacyDeepcodeBundleAddress returns the union data inside the ContentAddress as a LegacyDeepcodeBundleAddress
func (t ContentAddress) AsLegacyDeepcodeBundleAddress() (LegacyDeepcodeBundleAddress, error) {
	var body LegacyDeepcodeBundleAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLegacyDeepcodeBundleAddress overwrites any union data inside the ContentAddress as the provided LegacyDeepcodeBundleAddress
func (t *ContentAddress) FromLegacyDeepcodeBundleAddress(v LegacyDeepcodeBundleAddress) error {
	v.Scheme = "deepcode-bundle"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLegacyDeepcodeBundleAddress performs a merge with any union data inside the ContentAddress, using the provided LegacyDeepcodeBundleAddress
func (t *ContentAddress) MergeLegacyDeepcodeBundleAddress(v LegacyDeepcodeBundleAddress) error {
	v.Scheme = "deepcode-bundle"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsWorkspaceV1Address returns the union data inside the ContentAddress as a WorkspaceV1Address
func (t ContentAddress) AsWorkspaceV1Address() (WorkspaceV1Address, error) {
	var body WorkspaceV1Address
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWorkspaceV1Address overwrites any union data inside the ContentAddress as the provided WorkspaceV1Address
func (t *ContentAddress) FromWorkspaceV1Address(v WorkspaceV1Address) error {
	v.Scheme = "workspace-v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWorkspaceV1Address performs a merge with any union data inside the ContentAddress, using the provided WorkspaceV1Address
func (t *ContentAddress) MergeWorkspaceV1Address(v WorkspaceV1Address) error {
	v.Scheme = "workspace-v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ContentAddress) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"scheme"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ContentAddress) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "deepcode-bundle":
		return t.AsLegacyDeepcodeBundleAddress()
	case "workspace-v1":
		return t.AsWorkspaceV1Address()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ContentAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ContentAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateExcludeRule0 returns the union data inside the CreateExcludeRule as a CreateExcludeRule0
func (t CreateExcludeRule) AsCreateExcludeRule0() (CreateExcludeRule0, error) {
	var body CreateExcludeRule0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateExcludeRule0 overwrites any union data inside the CreateExcludeRule as the provided CreateExcludeRule0
func (t *CreateExcludeRule) FromCreateExcludeRule0(v CreateExcludeRule0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateExcludeRule0 performs a merge with any union data inside the CreateExcludeRule, using the provided CreateExcludeRule0
func (t *CreateExcludeRule) MergeCreateExcludeRule0(v CreateExcludeRule0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateObjectExcludeRule returns the union data inside the CreateExcludeRule as a CreateObjectExcludeRule
func (t CreateExcludeRule) AsCreateObjectExcludeRule() (CreateObjectExcludeRule, error) {
	var body CreateObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateObjectExcludeRule overwrites any union data inside the CreateExcludeRule as the provided CreateObjectExcludeRule
func (t *CreateExcludeRule) FromCreateObjectExcludeRule(v CreateObjectExcludeRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateObjectExcludeRule performs a merge with any union data inside the CreateExcludeRule, using the provided CreateObjectExcludeRule
func (t *CreateExcludeRule) MergeCreateObjectExcludeRule(v CreateObjectExcludeRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExcludeRule0 returns the union data inside the ExcludeRule as a ExcludeRule0
func (t ExcludeRule) AsExcludeRule0() (ExcludeRule0, error) {
	var body ExcludeRule0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExcludeRule0 overwrites any union data inside the ExcludeRule as the provided ExcludeRule0
func (t *ExcludeRule) FromExcludeRule0(v ExcludeRule0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExcludeRule0 performs a merge with any union data inside the ExcludeRule, using the provided ExcludeRule0
func (t *ExcludeRule) MergeExcludeRule0(v ExcludeRule0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectExcludeRule returns the union data inside the ExcludeRule as a ObjectExcludeRule
func (t ExcludeRule) AsObjectExcludeRule() (ObjectExcludeRule, error) {
	var body ObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectExcludeRule overwrites any union data inside the ExcludeRule as the provided ObjectExcludeRule
func (t *ExcludeRule) FromObjectExcludeRule(v ObjectExcludeRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectExcludeRule performs a merge with any union data inside the ExcludeRule, using the provided ObjectExcludeRule
func (t *ExcludeRule) MergeObjectExcludeRule(v ObjectExcludeRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCodeSastFingerprintV0 returns the union data inside the Fingerprint as a CodeSastFingerprintV0
func (t Fingerprint) AsCodeSastFingerprintV0() (CodeSastFingerprintV0, error) {
	var body CodeSastFingerprintV0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCodeSastFingerprintV0 overwrites any union data inside the Fingerprint as the provided CodeSastFingerprintV0
func (t *Fingerprint) FromCodeSastFingerprintV0(v CodeSastFingerprintV0) error {
	v.Scheme = "code-sast-v0"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCodeSastFingerprintV0 performs a merge with any union data inside the Fingerprint, using the provided CodeSastFingerprintV0
func (t *Fingerprint) MergeCodeSastFingerprintV0(v CodeSastFingerprintV0) error {
	v.Scheme = "code-sast-v0"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCodeSastFingerprintV1 returns the union data inside the Fingerprint as a CodeSastFingerprintV1
func (t Fingerprint) AsCodeSastFingerprintV1() (CodeSastFingerprintV1, error) {
	var body CodeSastFingerprintV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCodeSastFingerprintV1 overwrites any union data inside the Fingerprint as the provided CodeSastFingerprintV1
func (t *Fingerprint) FromCodeSastFingerprintV1(v CodeSastFingerprintV1) error {
	v.Scheme = "code-sast-v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCodeSastFingerprintV1 performs a merge with any union data inside the Fingerprint, using the provided CodeSastFingerprintV1
func (t *Fingerprint) MergeCodeSastFingerprintV1(v CodeSastFingerprintV1) error {
	v.Scheme = "code-sast-v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsScaProblemFingerprint returns the union data inside the Fingerprint as a ScaProblemFingerprint
func (t Fingerprint) AsScaProblemFingerprint() (ScaProblemFingerprint, error) {
	var body ScaProblemFingerprint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromScaProblemFingerprint overwrites any union data inside the Fingerprint as the provided ScaProblemFingerprint
func (t *Fingerprint) FromScaProblemFingerprint(v ScaProblemFingerprint) error {
	v.Scheme = "sca-problem"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeScaProblemFingerprint performs a merge with any union data inside the Fingerprint, using the provided ScaProblemFingerprint
func (t *Fingerprint) MergeScaProblemFingerprint(v ScaProblemFingerprint) error {
	v.Scheme = "sca-problem"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Fingerprint) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"scheme"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Fingerprint) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "code-sast-v0":
		return t.AsCodeSastFingerprintV0()
	case "code-sast-v1":
		return t.AsCodeSastFingerprintV1()
	case "sca-problem":
		return t.AsScaProblemFingerprint()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Fingerprint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Fingerprint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIoSnykApiCommonLinkString returns the union data inside the LinkProperty as a IoSnykApiCommonLinkString
func (t LinkProperty) AsIoSnykApiCommonLinkString() (IoSnykApiCommonLinkString, error) {
	var body IoSnykApiCommonLinkString
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIoSnykApiCommonLinkString overwrites any union data inside the LinkProperty as the provided IoSnykApiCommonLinkString
func (t *LinkProperty) FromIoSnykApiCommonLinkString(v IoSnykApiCommonLinkString) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIoSnykApiCommonLinkString performs a merge with any union data inside the LinkProperty, using the provided IoSnykApiCommonLinkString
func (t *LinkProperty) MergeIoSnykApiCommonLinkString(v IoSnykApiCommonLinkString) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsIoSnykApiCommonLinkObject returns the union data inside the LinkProperty as a IoSnykApiCommonLinkObject
func (t LinkProperty) AsIoSnykApiCommonLinkObject() (IoSnykApiCommonLinkObject, error) {
	var body IoSnykApiCommonLinkObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIoSnykApiCommonLinkObject overwrites any union data inside the LinkProperty as the provided IoSnykApiCommonLinkObject
func (t *LinkProperty) FromIoSnykApiCommonLinkObject(v IoSnykApiCommonLinkObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIoSnykApiCommonLinkObject performs a merge with any union data inside the LinkProperty, using the provided IoSnykApiCommonLinkObject
func (t *LinkProperty) MergeIoSnykApiCommonLinkObject(v IoSnykApiCommonLinkObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkProperty) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkProperty) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsFileObjectExcludeRule returns the union data inside the ObjectExcludeRule as a FileObjectExcludeRule
func (t ObjectExcludeRule) AsFileObjectExcludeRule() (FileObjectExcludeRule, error) {
	var body FileObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileObjectExcludeRule overwrites any union data inside the ObjectExcludeRule as the provided FileObjectExcludeRule
func (t *ObjectExcludeRule) FromFileObjectExcludeRule(v FileObjectExcludeRule) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileObjectExcludeRule performs a merge with any union data inside the ObjectExcludeRule, using the provided FileObjectExcludeRule
func (t *ObjectExcludeRule) MergeFileObjectExcludeRule(v FileObjectExcludeRule) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsOtherObjectExcludeRule returns the union data inside the ObjectExcludeRule as a OtherObjectExcludeRule
func (t ObjectExcludeRule) AsOtherObjectExcludeRule() (OtherObjectExcludeRule, error) {
	var body OtherObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromOtherObjectExcludeRule overwrites any union data inside the ObjectExcludeRule as the provided OtherObjectExcludeRule
func (t *ObjectExcludeRule) FromOtherObjectExcludeRule(v OtherObjectExcludeRule) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeOtherObjectExcludeRule performs a merge with any union data inside the ObjectExcludeRule, using the provided OtherObjectExcludeRule
func (t *ObjectExcludeRule) MergeOtherObjectExcludeRule(v OtherObjectExcludeRule) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ObjectExcludeRule) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ObjectExcludeRule) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "file":
		return t.AsFileObjectExcludeRule()
	case "other":
		return t.AsOtherObjectExcludeRule()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ObjectExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObjectExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPackageURL returns the union data inside the Package as a PackageURL
func (t Package) AsPackageURL() (PackageURL, error) {
	var body PackageURL
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageURL overwrites any union data inside the Package as the provided PackageURL
func (t *Package) FromPackageURL(v PackageURL) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageURL performs a merge with any union data inside the Package, using the provided PackageURL
func (t *Package) MergePackageURL(v PackageURL) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsPackageObject returns the union data inside the Package as a PackageObject
func (t Package) AsPackageObject() (PackageObject, error) {
	var body PackageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPackageObject overwrites any union data inside the Package as the provided PackageObject
func (t *Package) FromPackageObject(v PackageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePackageObject performs a merge with any union data inside the Package, using the provided PackageObject
func (t *Package) MergePackageObject(v PackageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Package) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Package) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsBusinessCriticalityRiskFactor returns the union data inside the RiskFactors as a BusinessCriticalityRiskFactor
func (t RiskFactors) AsBusinessCriticalityRiskFactor() (BusinessCriticalityRiskFactor, error) {
	var body BusinessCriticalityRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromBusinessCriticalityRiskFactor overwrites any union data inside the RiskFactors as the provided BusinessCriticalityRiskFactor
func (t *RiskFactors) FromBusinessCriticalityRiskFactor(v BusinessCriticalityRiskFactor) error {
	v.Factor = "business-criticality"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeBusinessCriticalityRiskFactor performs a merge with any union data inside the RiskFactors, using the provided BusinessCriticalityRiskFactor
func (t *RiskFactors) MergeBusinessCriticalityRiskFactor(v BusinessCriticalityRiskFactor) error {
	v.Factor = "business-criticality"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsCvssRiskFactor returns the union data inside the RiskFactors as a CvssRiskFactor
func (t RiskFactors) AsCvssRiskFactor() (CvssRiskFactor, error) {
	var body CvssRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCvssRiskFactor overwrites any union data inside the RiskFactors as the provided CvssRiskFactor
func (t *RiskFactors) FromCvssRiskFactor(v CvssRiskFactor) error {
	v.Factor = "cvss"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCvssRiskFactor performs a merge with any union data inside the RiskFactors, using the provided CvssRiskFactor
func (t *RiskFactors) MergeCvssRiskFactor(v CvssRiskFactor) error {
	v.Factor = "cvss"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsEpssRiskFactor returns the union data inside the RiskFactors as a EpssRiskFactor
func (t RiskFactors) AsEpssRiskFactor() (EpssRiskFactor, error) {
	var body EpssRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEpssRiskFactor overwrites any union data inside the RiskFactors as the provided EpssRiskFactor
func (t *RiskFactors) FromEpssRiskFactor(v EpssRiskFactor) error {
	v.Factor = "epss"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEpssRiskFactor performs a merge with any union data inside the RiskFactors, using the provided EpssRiskFactor
func (t *RiskFactors) MergeEpssRiskFactor(v EpssRiskFactor) error {
	v.Factor = "epss"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsVulnerabilityFactRiskFactor returns the union data inside the RiskFactors as a VulnerabilityFactRiskFactor
func (t RiskFactors) AsVulnerabilityFactRiskFactor() (VulnerabilityFactRiskFactor, error) {
	var body VulnerabilityFactRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityFactRiskFactor overwrites any union data inside the RiskFactors as the provided VulnerabilityFactRiskFactor
func (t *RiskFactors) FromVulnerabilityFactRiskFactor(v VulnerabilityFactRiskFactor) error {
	v.Factor = "vulnerability-fact"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityFactRiskFactor performs a merge with any union data inside the RiskFactors, using the provided VulnerabilityFactRiskFactor
func (t *RiskFactors) MergeVulnerabilityFactRiskFactor(v VulnerabilityFactRiskFactor) error {
	v.Factor = "vulnerability-fact"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsVulnerabilityInstanceFactRiskFactor returns the union data inside the RiskFactors as a VulnerabilityInstanceFactRiskFactor
func (t RiskFactors) AsVulnerabilityInstanceFactRiskFactor() (VulnerabilityInstanceFactRiskFactor, error) {
	var body VulnerabilityInstanceFactRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVulnerabilityInstanceFactRiskFactor overwrites any union data inside the RiskFactors as the provided VulnerabilityInstanceFactRiskFactor
func (t *RiskFactors) FromVulnerabilityInstanceFactRiskFactor(v VulnerabilityInstanceFactRiskFactor) error {
	v.Factor = "vulnerability-instance-fact"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVulnerabilityInstanceFactRiskFactor performs a merge with any union data inside the RiskFactors, using the provided VulnerabilityInstanceFactRiskFactor
func (t *RiskFactors) MergeVulnerabilityInstanceFactRiskFactor(v VulnerabilityInstanceFactRiskFactor) error {
	v.Factor = "vulnerability-instance-fact"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t RiskFactors) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"factor"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RiskFactors) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "business-criticality":
		return t.AsBusinessCriticalityRiskFactor()
	case "cvss":
		return t.AsCvssRiskFactor()
	case "epss":
		return t.AsEpssRiskFactor()
	case "vulnerability-fact":
		return t.AsVulnerabilityFactRiskFactor()
	case "vulnerability-instance-fact":
		return t.AsVulnerabilityInstanceFactRiskFactor()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RiskFactors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RiskFactors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsSuggestedPackageUpgrade returns the union data inside the Suggestion as a SuggestedPackageUpgrade
func (t Suggestion) AsSuggestedPackageUpgrade() (SuggestedPackageUpgrade, error) {
	var body SuggestedPackageUpgrade
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuggestedPackageUpgrade overwrites any union data inside the Suggestion as the provided SuggestedPackageUpgrade
func (t *Suggestion) FromSuggestedPackageUpgrade(v SuggestedPackageUpgrade) error {
	v.Type = "package-upgrade"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuggestedPackageUpgrade performs a merge with any union data inside the Suggestion, using the provided SuggestedPackageUpgrade
func (t *Suggestion) MergeSuggestedPackageUpgrade(v SuggestedPackageUpgrade) error {
	v.Type = "package-upgrade"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsSuggestedOther returns the union data inside the Suggestion as a SuggestedOther
func (t Suggestion) AsSuggestedOther() (SuggestedOther, error) {
	var body SuggestedOther
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSuggestedOther overwrites any union data inside the Suggestion as the provided SuggestedOther
func (t *Suggestion) FromSuggestedOther(v SuggestedOther) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSuggestedOther performs a merge with any union data inside the Suggestion, using the provided SuggestedOther
func (t *Suggestion) MergeSuggestedOther(v SuggestedOther) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Suggestion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Suggestion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "other":
		return t.AsSuggestedOther()
	case "package-upgrade":
		return t.AsSuggestedPackageUpgrade()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Suggestion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Suggestion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsGitSCMInput returns the union data inside the TestInput as a GitSCMInput
func (t TestInput) AsGitSCMInput() (GitSCMInput, error) {
	var body GitSCMInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGitSCMInput overwrites any union data inside the TestInput as the provided GitSCMInput
func (t *TestInput) FromGitSCMInput(v GitSCMInput) error {
	v.Type = "git-scm"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGitSCMInput performs a merge with any union data inside the TestInput, using the provided GitSCMInput
func (t *TestInput) MergeGitSCMInput(v GitSCMInput) error {
	v.Type = "git-scm"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsContentAddressInput returns the union data inside the TestInput as a ContentAddressInput
func (t TestInput) AsContentAddressInput() (ContentAddressInput, error) {
	var body ContentAddressInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromContentAddressInput overwrites any union data inside the TestInput as the provided ContentAddressInput
func (t *TestInput) FromContentAddressInput(v ContentAddressInput) error {
	v.Type = "content-address"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeContentAddressInput performs a merge with any union data inside the TestInput, using the provided ContentAddressInput
func (t *TestInput) MergeContentAddressInput(v ContentAddressInput) error {
	v.Type = "content-address"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestInput) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TestInput) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "content-address":
		return t.AsContentAddressInput()
	case "git-scm":
		return t.AsGitSCMInput()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TestInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
