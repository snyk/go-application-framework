// Package local_models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package local_models

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for IoSnykApiCommonJsonApiVersion.
const (
	N10 IoSnykApiCommonJsonApiVersion = "1.0"
)

// Defines values for TypesBusinessCriticalityRiskFactorFactor.
const (
	BusinessCriticality TypesBusinessCriticalityRiskFactorFactor = "business-criticality"
)

// Defines values for TypesBusinessCriticalityRiskFactorValue.
const (
	TypesBusinessCriticalityRiskFactorValueHigh   TypesBusinessCriticalityRiskFactorValue = "high"
	TypesBusinessCriticalityRiskFactorValueLow    TypesBusinessCriticalityRiskFactorValue = "low"
	TypesBusinessCriticalityRiskFactorValueMedium TypesBusinessCriticalityRiskFactorValue = "medium"
)

// Defines values for TypesCodeSastFingerprintV0Scheme.
const (
	CodeSastV0 TypesCodeSastFingerprintV0Scheme = "code-sast-v0"
)

// Defines values for TypesCodeSastFingerprintV1Scheme.
const (
	CodeSastV1 TypesCodeSastFingerprintV1Scheme = "code-sast-v1"
)

// Defines values for TypesContentAddressInputType.
const (
	TypesContentAddressInputTypeContentAddress TypesContentAddressInputType = "content-address"
)

// Defines values for TypesCreateTestContextSdlcStage.
const (
	TypesCreateTestContextSdlcStageCicd      TypesCreateTestContextSdlcStage = "cicd"
	TypesCreateTestContextSdlcStageDev       TypesCreateTestContextSdlcStage = "dev"
	TypesCreateTestContextSdlcStagePrcheck   TypesCreateTestContextSdlcStage = "prcheck"
	TypesCreateTestContextSdlcStageRecurring TypesCreateTestContextSdlcStage = "recurring"
)

// Defines values for TypesCvssRiskFactorFactor.
const (
	Cvss TypesCvssRiskFactorFactor = "cvss"
)

// Defines values for TypesEpssRiskFactorFactor.
const (
	Epss TypesEpssRiskFactorFactor = "epss"
)

// Defines values for TypesFileObjectExcludeRuleType.
const (
	File TypesFileObjectExcludeRuleType = "file"
)

// Defines values for TypesFindingAttributesDelta.
const (
	Existing   TypesFindingAttributesDelta = "existing"
	Introduced TypesFindingAttributesDelta = "introduced"
	Removed    TypesFindingAttributesDelta = "removed"
)

// Defines values for TypesFindingRatingSeverityOriginalValue.
const (
	TypesFindingRatingSeverityOriginalValueCritical TypesFindingRatingSeverityOriginalValue = "critical"
	TypesFindingRatingSeverityOriginalValueHigh     TypesFindingRatingSeverityOriginalValue = "high"
	TypesFindingRatingSeverityOriginalValueInfo     TypesFindingRatingSeverityOriginalValue = "info"
	TypesFindingRatingSeverityOriginalValueLow      TypesFindingRatingSeverityOriginalValue = "low"
	TypesFindingRatingSeverityOriginalValueMedium   TypesFindingRatingSeverityOriginalValue = "medium"
	TypesFindingRatingSeverityOriginalValueNone     TypesFindingRatingSeverityOriginalValue = "none"
)

// Defines values for TypesFindingRatingSeverityReason.
const (
	TypesFindingRatingSeverityReasonManual TypesFindingRatingSeverityReason = "manual"
	TypesFindingRatingSeverityReasonOther  TypesFindingRatingSeverityReason = "other"
	TypesFindingRatingSeverityReasonPolicy TypesFindingRatingSeverityReason = "policy"
)

// Defines values for TypesFindingRatingSeverityValue.
const (
	Critical TypesFindingRatingSeverityValue = "critical"
	High     TypesFindingRatingSeverityValue = "high"
	Info     TypesFindingRatingSeverityValue = "info"
	Low      TypesFindingRatingSeverityValue = "low"
	Medium   TypesFindingRatingSeverityValue = "medium"
	None     TypesFindingRatingSeverityValue = "none"
)

// Defines values for TypesFindingRatingSeverityMethod.
const (
	TypesFindingRatingSeverityMethodCVSSv2  TypesFindingRatingSeverityMethod = "CVSSv2"
	TypesFindingRatingSeverityMethodCVSSv3  TypesFindingRatingSeverityMethod = "CVSSv3"
	TypesFindingRatingSeverityMethodCVSSv31 TypesFindingRatingSeverityMethod = "CVSSv31"
	TypesFindingRatingSeverityMethodCVSSv4  TypesFindingRatingSeverityMethod = "CVSSv4"
	TypesFindingRatingSeverityMethodOWASP   TypesFindingRatingSeverityMethod = "OWASP"
	TypesFindingRatingSeverityMethodOther   TypesFindingRatingSeverityMethod = "other"
)

// Defines values for TypesFindingResourceType.
const (
	Findings TypesFindingResourceType = "findings"
)

// Defines values for TypesFingerprintAssetV1Scheme.
const (
	Snykassetfindingv1 TypesFingerprintAssetV1Scheme = "snyk/asset/finding/v1"
)

// Defines values for TypesFingerprintProjectV1Scheme.
const (
	Snykorgprojectfindingv1 TypesFingerprintProjectV1Scheme = "snyk/org/project/finding/v1"
)

// Defines values for TypesFingerprintRepositoryV1Scheme.
const (
	Snykorgrepositoryfindingv1 TypesFingerprintRepositoryV1Scheme = "snyk/org/repository/finding/v1"
)

// Defines values for TypesGitSCMInputType.
const (
	GitScm TypesGitSCMInputType = "git-scm"
)

// Defines values for TypesIdentityFingerprintScheme.
const (
	Identity TypesIdentityFingerprintScheme = "identity"
)

// Defines values for TypesLegacyDeepcodeBundleAddressScheme.
const (
	DeepcodeBundle TypesLegacyDeepcodeBundleAddressScheme = "deepcode-bundle"
)

// Defines values for TypesOtherObjectExcludeRuleType.
const (
	TypesOtherObjectExcludeRuleTypeOther TypesOtherObjectExcludeRuleType = "other"
)

// Defines values for TypesScaProblemFingerprintScheme.
const (
	ScaProblem TypesScaProblemFingerprintScheme = "sca-problem"
)

// Defines values for TypesScanType.
const (
	TypesScanTypeOther TypesScanType = "other"
	TypesScanTypeSast  TypesScanType = "sast"
	TypesScanTypeSca   TypesScanType = "sca"
)

// Defines values for TypesSuggestedOtherType.
const (
	TypesSuggestedOtherTypeOther TypesSuggestedOtherType = "other"
)

// Defines values for TypesSuggestedPackageUpgradeType.
const (
	PackageUpgrade TypesSuggestedPackageUpgradeType = "package-upgrade"
)

// Defines values for TypesSuggestedPackageUpgradeUpgradeConflicts.
const (
	False TypesSuggestedPackageUpgradeUpgradeConflicts = false
	True  TypesSuggestedPackageUpgradeUpgradeConflicts = true
)

// Defines values for TypesSuppressionKind.
const (
	TypesSuppressionKindIgnored               TypesSuppressionKind = "ignored"
	TypesSuppressionKindOther                 TypesSuppressionKind = "other"
	TypesSuppressionKindPendingIgnoreApproval TypesSuppressionKind = "pending_ignore_approval"
)

// Defines values for TypesTestContextSdlcStage.
const (
	TypesTestContextSdlcStageCicd      TypesTestContextSdlcStage = "cicd"
	TypesTestContextSdlcStageDev       TypesTestContextSdlcStage = "dev"
	TypesTestContextSdlcStageOther     TypesTestContextSdlcStage = "other"
	TypesTestContextSdlcStagePrcheck   TypesTestContextSdlcStage = "prcheck"
	TypesTestContextSdlcStageRecurring TypesTestContextSdlcStage = "recurring"
)

// Defines values for TypesTestExecStatus.
const (
	Done    TypesTestExecStatus = "done"
	Pending TypesTestExecStatus = "pending"
	Running TypesTestExecStatus = "running"
)

// Defines values for TypesTestOutcomeReason.
const (
	Other        TypesTestOutcomeReason = "other"
	PolicyBreach TypesTestOutcomeReason = "policy_breach"
	Timeout      TypesTestOutcomeReason = "timeout"
)

// Defines values for TypesTestOutcomeResult.
const (
	Fail TypesTestOutcomeResult = "fail"
	Pass TypesTestOutcomeResult = "pass"
)

// Defines values for TypesTestResourceType.
const (
	Tests TypesTestResourceType = "tests"
)

// Defines values for TypesVulnerabilityFactRiskFactorFactor.
const (
	VulnerabilityFact TypesVulnerabilityFactRiskFactorFactor = "vulnerability-fact"
)

// Defines values for TypesVulnerabilityGenericFactorFactor.
const (
	VulnerabilityGenericFact TypesVulnerabilityGenericFactorFactor = "vulnerability-generic-fact"
)

// Defines values for TypesVulnerabilityInstanceFactRiskFactorFactor.
const (
	VulnerabilityInstanceFact TypesVulnerabilityInstanceFactRiskFactorFactor = "vulnerability-instance-fact"
)

// Defines values for TypesWorkspaceV1AddressScheme.
const (
	WorkspaceV1 TypesWorkspaceV1AddressScheme = "workspace-v1"
)

// ContentAddress Content address whence source code can be obtained for scanning.
type ContentAddress struct {
	union json.RawMessage
}

// CreateExcludeRule CreateExcludeRule defines individual rules for exclusion of files during a test.
// Currently it supports either bare strings as recursive globs, or explicitly
// stated file patterns as recursive globs.
type CreateExcludeRule struct {
	union json.RawMessage
}

// CreateExcludeRule0 defines model for .
type CreateExcludeRule0 = string

// CreateObjectExcludeRule defines model for CreateObjectExcludeRule.
type CreateObjectExcludeRule = TypesFileObjectExcludeRule

// ExcludeRule ExcludeRule defines individual rules for exclusion of files during a test.
// Currently it supports either bare strings as recursive globs, or explicitly
// stated file patterns as recursive globs.
type ExcludeRule struct {
	union json.RawMessage
}

// ExcludeRule0 defines model for .
type ExcludeRule0 = string

// Fingerprint defines model for Fingerprint.
type Fingerprint struct {
	union json.RawMessage
}

// LinkProperty defines model for LinkProperty.
type LinkProperty struct {
	union json.RawMessage
}

// ObjectExcludeRule defines model for ObjectExcludeRule.
type ObjectExcludeRule struct {
	union json.RawMessage
}

// Package A Package is either a Package URL (pURL) or a decomposed PackageObject
// identifying a software package.
//
// See https://github.com/package-url/purl-spec for more information about
// pURLs.
type Package struct {
	union json.RawMessage
}

// RiskFactors defines model for RiskFactors.
type RiskFactors struct {
	union json.RawMessage
}

// Suggestion Suggestions are indications given to the user that might help with
// mitigating the finding.
type Suggestion struct {
	union json.RawMessage
}

// TestInput TestInput defines what will be tested.
//
// Another term for this might be "test coordinates".
type TestInput struct {
	union json.RawMessage
}

// IoSnykApiCommonError defines model for io.snyk.api.common.Error.
type IoSnykApiCommonError struct {
	// Code An application-specific error code, expressed as a string value.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Id A unique identifier for this particular occurrence of the problem.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Links A link that leads to further details about this particular occurrance of the problem.
	Links  *IoSnykApiCommonErrorLink `json:"links,omitempty"`
	Meta   *map[string]interface{}   `json:"meta,omitempty"`
	Source *struct {
		Parameter *string `json:"parameter,omitempty"`
		Pointer   *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// Status The HTTP status code applicable to this problem, expressed as a string value.
	Status string `json:"status"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// IoSnykApiCommonErrorDocument defines model for io.snyk.api.common.ErrorDocument.
type IoSnykApiCommonErrorDocument struct {
	Errors  []IoSnykApiCommonError `json:"errors"`
	Jsonapi IoSnykApiCommonJsonApi `json:"jsonapi"`
}

// IoSnykApiCommonErrorLink A link that leads to further details about this particular occurrance of the problem.
type IoSnykApiCommonErrorLink struct {
	About                *LinkProperty           `json:"about,omitempty"`
	AdditionalProperties map[string]LinkProperty `json:"-"`
}

// IoSnykApiCommonJsonApi defines model for io.snyk.api.common.JsonApi.
type IoSnykApiCommonJsonApi struct {
	// Version Version of the JSON API specification this server supports.
	Version IoSnykApiCommonJsonApiVersion `json:"version"`
}

// IoSnykApiCommonJsonApiVersion Version of the JSON API specification this server supports.
type IoSnykApiCommonJsonApiVersion string

// IoSnykApiCommonLinkObject defines model for io.snyk.api.common.LinkObject.
type IoSnykApiCommonLinkObject struct {
	Href IoSnykApiCommonLinkString `json:"href"`

	// Meta Free-form object that may contain non-standard information.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
}

// IoSnykApiCommonLinkString defines model for io.snyk.api.common.LinkString.
type IoSnykApiCommonLinkString = string

// IoSnykApiCommonMeta Free-form object that may contain non-standard information.
type IoSnykApiCommonMeta map[string]interface{}

// IoSnykApiCommonPaginatedLinks defines model for io.snyk.api.common.PaginatedLinks.
type IoSnykApiCommonPaginatedLinks struct {
	First *LinkProperty `json:"first,omitempty"`
	Last  *LinkProperty `json:"last,omitempty"`
	Next  *LinkProperty `json:"next,omitempty"`
	Prev  *LinkProperty `json:"prev,omitempty"`
	Self  *LinkProperty `json:"self,omitempty"`
}

// IoSnykApiCommonRelatedLink defines model for io.snyk.api.common.RelatedLink.
type IoSnykApiCommonRelatedLink struct {
	Related *LinkProperty `json:"related,omitempty"`
}

// IoSnykReactiveFindingLocation defines model for io.snyk.reactive.FindingLocation.
type IoSnykReactiveFindingLocation struct {
	DependencyPath *[]IoSnykReactiveScaPackage `json:"dependency_path,omitempty"`

	// SourceLocations Original locations are necessary for "existing" and "removed" findings. Locations should be available for all scan types where possible.
	SourceLocations *IoSnykReactiveFindingSourceLocation `json:"source_locations,omitempty"`
}

// IoSnykReactiveFindingSourceLocation Original locations are necessary for "existing" and "removed" findings. Locations should be available for all scan types where possible.
type IoSnykReactiveFindingSourceLocation struct {
	// Filepath Maps `sarif.Runs.Results.Location.PhysicalLocation.ArtifactLocation.URI`
	Filepath string `json:"filepath"`

	// OriginalEndColumn Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.EndColumn`
	OriginalEndColumn int `json:"original_end_column"`

	// OriginalEndLine Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.EndLine`
	OriginalEndLine int `json:"original_end_line"`

	// OriginalStartColumn Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.StartColumn`
	OriginalStartColumn int `json:"original_start_column"`

	// OriginalStartLine Maps `sarif.Runs.Results.Location.PhysicalLocation.Region.StartLine`
	OriginalStartLine int `json:"original_start_line"`
}

// IoSnykReactiveScaPackage defines model for io.snyk.reactive.ScaPackage.
type IoSnykReactiveScaPackage struct {
	PackageName    string `json:"package_name"`
	PackageVersion string `json:"package_version"`
}

// TypesBusinessCriticalityRiskFactor defines model for types.BusinessCriticalityRiskFactor.
type TypesBusinessCriticalityRiskFactor struct {
	Factor TypesBusinessCriticalityRiskFactorFactor `json:"factor"`
	Value  TypesBusinessCriticalityRiskFactorValue  `json:"value"`
}

// TypesBusinessCriticalityRiskFactorFactor defines model for TypesBusinessCriticalityRiskFactor.Factor.
type TypesBusinessCriticalityRiskFactorFactor string

// TypesBusinessCriticalityRiskFactorValue defines model for TypesBusinessCriticalityRiskFactor.Value.
type TypesBusinessCriticalityRiskFactorValue string

// TypesCodeFlow defines model for types.CodeFlow.
type TypesCodeFlow struct {
	ThreadFlows []TypesThreadFlow `json:"threadFlows"`
}

// TypesCodeSastFingerprintV0 defines model for types.CodeSastFingerprintV0.
type TypesCodeSastFingerprintV0 struct {
	Scheme TypesCodeSastFingerprintV0Scheme `json:"scheme"`
	Value  string                           `json:"value"`
}

// TypesCodeSastFingerprintV0Scheme defines model for TypesCodeSastFingerprintV0.Scheme.
type TypesCodeSastFingerprintV0Scheme string

// TypesCodeSastFingerprintV1 defines model for types.CodeSastFingerprintV1.
type TypesCodeSastFingerprintV1 struct {
	Scheme TypesCodeSastFingerprintV1Scheme `json:"scheme"`
	Value  string                           `json:"value"`
}

// TypesCodeSastFingerprintV1Scheme defines model for TypesCodeSastFingerprintV1.Scheme.
type TypesCodeSastFingerprintV1Scheme string

// TypesComponent A Component (as in, software component) is the subject of a security scan.
type TypesComponent struct {
	// Name Name of the component. Names are free-form and semantically meaningful in the context of
	// what is being scanned, and how it is being scanned. It may or may not be a file name or path,
	// depending on what is scanned.
	Name string `json:"name"`

	// ScanType Scan type of the component.
	ScanType TypesScanType `json:"scan_type"`
}

// TypesContentAddressInput Test input obtained from a source code image, addressed by its content digest.
type TypesContentAddressInput struct {
	// Spec Content address specification, which defines the target address to test, or a
	// pair of addresses to test for a differential test.
	Spec TypesContentAddressSpec      `json:"spec"`
	Type TypesContentAddressInputType `json:"type"`
}

// TypesContentAddressInputType defines model for TypesContentAddressInput.Type.
type TypesContentAddressInputType string

// TypesContentAddressSpec Content address specification, which defines the target address to test, or a
// pair of addresses to test for a differential test.
type TypesContentAddressSpec struct {
	// Base Base content for a differential test. When provided,
	// FindingAttributes.delta will be set with respect to the base in results.
	//
	// Otherwise FindingAttributes.delta is left unset.
	Base *ContentAddress `json:"base,omitempty"`

	// Target Target content to be scanned for this security test.
	Target ContentAddress `json:"target"`
}

// TypesCoverage Coverage statistics about a Test's Findings.
type TypesCoverage struct {
	Files       int    `json:"files"`
	IsSupported bool   `json:"isSupported"`
	Lang        string `json:"lang"`
	Type        string `json:"type"`
}

// TypesCreateTestAttributes Attributes provided when creating a new test.
type TypesCreateTestAttributes struct {
	// Context Test context; pertinent information important to associate with the outcome
	// of the test and its further processing, but is not directly used in the
	// test.
	//
	// These are worth modeling with a concrete type, rather than as generic
	// free-form metadata to communicate to consumers of the test what values are
	// available.
	Context *TypesCreateTestContext `json:"context,omitempty"`

	// Input Test inputs; what will be tested.
	Input TestInput `json:"input"`

	// Options CreateTestOptions are arguments which configure the test and determine the
	// behavior of how it is conducted.
	//
	// Options are optional when creating a test and may be derived from other
	// sources, such as a test configuration policy if not specified. Provided
	// options may be merged with or overridden by such policy.
	//
	// In the requested Test resource, these options will reflect the effective
	// options resolved and applied to the execution of the test.
	Options *TypesCreateTestOptions `json:"options,omitempty"`
}

// TypesCreateTestContext CreateTestContext identifies the context in which this Test occurs.
type TypesCreateTestContext struct {
	// GitScmBranch Git SCM branch associated with the content, if known.
	//
	// This allows providing the Git SCM branch as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on a feature branch.
	GitScmBranch *string `json:"git_scm_branch,omitempty"`

	// GitScmUrl Git SCM URL associated with the content, if known.
	//
	// This allows providing the Git SCM URL as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on source code which was cloned
	// from, and will be proposed for merging back into, an SCM repository.
	GitScmUrl *string `json:"git_scm_url,omitempty"`

	// SdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
	SdlcStage TypesCreateTestContextSdlcStage `json:"sdlc_stage"`
}

// TypesCreateTestContextSdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
type TypesCreateTestContextSdlcStage string

// TypesCreateTestOptions CreateTestOptions defines options which determine how the Test is conducted.
type TypesCreateTestOptions struct {
	// Exclude Files from which findings should be excluded and removed from
	// results.
	//
	// This is different from FindingAttributes.suppressions; the exclude is an
	// up-front declaration that findings in the excluded files are
	// immaterial to the test result (pass/fail), and should not be reported at all.
	//
	// Excluded files might still be used to link other files/findings though. For
	// example, a SAST (source-to-sink) or SCA analysis (transitive dependency
	// chain) might transit an excluded file, enabling discovery in a
	// non-excluded file.
	Exclude *[]CreateExcludeRule `json:"exclude,omitempty"`
}

// TypesCvssRiskFactor defines model for types.CvssRiskFactor.
type TypesCvssRiskFactor struct {
	// CvssVersion The CVSS version being described. This will be a published CVSS
	// specification version, such as "3.1" or "4.0"
	CvssVersion string                    `json:"cvss_version"`
	Factor      TypesCvssRiskFactorFactor `json:"factor"`

	// Vector CVSS vector string, the format of which may be CVSS specification version
	// dependent.
	//
	// See https://www.first.org/cvss/specification-document#Vector-String for
	// details.
	Vector string `json:"vector"`
}

// TypesCvssRiskFactorFactor defines model for TypesCvssRiskFactor.Factor.
type TypesCvssRiskFactorFactor string

// TypesEpssRiskFactor defines model for types.EpssRiskFactor.
type TypesEpssRiskFactor struct {
	Factor TypesEpssRiskFactorFactor `json:"factor"`
	Value  float32                   `json:"value"`
}

// TypesEpssRiskFactorFactor defines model for TypesEpssRiskFactor.Factor.
type TypesEpssRiskFactorFactor string

// TypesExampleCommitFix defines model for types.ExampleCommitFix.
type TypesExampleCommitFix struct {
	CommitUrl string      `json:"commitUrl"`
	Lines     []TypesLine `json:"lines"`
}

// TypesFileObjectExcludeRule defines model for types.FileObjectExcludeRule.
type TypesFileObjectExcludeRule struct {
	Type TypesFileObjectExcludeRuleType `json:"type"`

	// Value A recursive glob matching files. Equivalent to a bare string.
	Value string `json:"value"`
}

// TypesFileObjectExcludeRuleType defines model for TypesFileObjectExcludeRule.Type.
type TypesFileObjectExcludeRuleType string

// TypesFindingAttributes A Finding entity with a common format for all types of security scans. Notably, this is a sub-resource of a Test.
type TypesFindingAttributes struct {
	CodeFlows *[]TypesCodeFlow `json:"codeFlows,omitempty"`

	// Component Component in which the finding was discovered.
	Component TypesComponent `json:"component"`

	// Delta Represent whether a finding is net new (introduced), removed, or preserved
	// in a test involving a diff between inputs.
	//
	// Only set in a differential test conducted with respect to base content.
	Delta *TypesFindingAttributesDelta `json:"delta,omitempty"`

	// Fingerprint Natural key, or fingerprint, to identify the same Finding across multiple
	// Test runs. Unique per Test. Here's why:
	// https://github.com/snyk/pr-experience-poc/blob/main/docs/design-documents/pr-inline-comments.md#why-do-we-need-fingerprints
	Fingerprint   []Fingerprint `json:"fingerprint"`
	IsAutofixable *bool         `json:"isAutofixable,omitempty"`

	// Locations A set of locations where the result was detected. Only one location should
	// be included unless the finding can only be resolved by making a change at
	// every location.
	Locations *[]IoSnykReactiveFindingLocation `json:"locations,omitempty"`
	Message   TypesFindingMessage              `json:"message"`
	Policy    *TypesPolicyv1                   `json:"policy,omitempty"`

	// Rating The severity and risk rating of the vulnerability
	Rating      *TypesFindingRating `json:"rating,omitempty"`
	ReferenceId *TypesReferenceId   `json:"referenceId,omitempty"`

	// Suggestions Suggestions are indications given to the user that might help with
	// mitigating the finding.
	//
	// For mitigation with a higher degree of confidence, remediation and fix
	// relationship links should be used.
	Suggestions *[]Suggestion `json:"suggestions,omitempty"`

	// Suppression Reasons for why a Finding can be suppressed from a Test result. This MAY NOT be required at all, given the presentation
	Suppression *TypesSuppression `json:"suppression,omitempty"`
}

// TypesFindingAttributesDelta Represent whether a finding is net new (introduced), removed, or preserved
// in a test involving a diff between inputs.
//
// Only set in a differential test conducted with respect to base content.
type TypesFindingAttributesDelta string

// TypesFindingCounts defines model for types.FindingCounts.
type TypesFindingCounts struct {
	// Count Net count of findings, including suppressions.
	Count uint32 `json:"count"`

	// CountAdjusted Net count of findings minus suppressions.
	CountAdjusted uint32 `json:"count_adjusted"`

	// CountBy Total finding counts (including ignores) grouped by severity and
	// possibly other factors.
	CountBy TypesFindingCounts_CountBy `json:"count_by"`

	// CountByAdjusted Net finding counts (excluding ignores) grouped by severity and possibly other
	// factors.
	CountByAdjusted TypesFindingCounts_CountByAdjusted `json:"count_by_adjusted"`

	// CountBySuppressed Net suppressed finding count, grouped by severity and possibly other factors.
	CountBySuppressed TypesFindingCounts_CountBySuppressed `json:"count_by_suppressed"`

	// CountKeyOrderAsc Ordering hint for the grouping keys in count_by.
	//
	// Record key is a well-known grouping of the resource object, matched with
	// count_by.
	//
	// Record values are arrays of known possible values for the group keys in
	// ascending order, from lowest to highest. Values other than those enumerated
	// must be tolerated; their ordering is unspecified with respect to enumerated
	// values.
	CountKeyOrderAsc TypesFindingCounts_CountKeyOrderAsc `json:"count_key_order_asc"`

	// CountSuppressed Findings excluded from the count shown to users, including ignored findings.
	CountSuppressed uint32 `json:"count_suppressed"`
}

// TypesFindingCounts_CountBy Total finding counts (including ignores) grouped by severity and
// possibly other factors.
type TypesFindingCounts_CountBy struct {
	Severity             map[string]uint32            `json:"severity"`
	AdditionalProperties map[string]map[string]uint32 `json:"-"`
}

// TypesFindingCounts_CountByAdjusted Net finding counts (excluding ignores) grouped by severity and possibly other
// factors.
type TypesFindingCounts_CountByAdjusted struct {
	Severity             map[string]uint32            `json:"severity"`
	AdditionalProperties map[string]map[string]uint32 `json:"-"`
}

// TypesFindingCounts_CountBySuppressed Net suppressed finding count, grouped by severity and possibly other factors.
type TypesFindingCounts_CountBySuppressed struct {
	Severity             map[string]uint32            `json:"severity"`
	AdditionalProperties map[string]map[string]uint32 `json:"-"`
}

// TypesFindingCounts_CountKeyOrderAsc Ordering hint for the grouping keys in count_by.
//
// Record key is a well-known grouping of the resource object, matched with
// count_by.
//
// Record values are arrays of known possible values for the group keys in
// ascending order, from lowest to highest. Values other than those enumerated
// must be tolerated; their ordering is unspecified with respect to enumerated
// values.
type TypesFindingCounts_CountKeyOrderAsc struct {
	// Severity FindingCounts has a deterministic ordering for severity counts.
	Severity             []string            `json:"severity"`
	AdditionalProperties map[string][]string `json:"-"`
}

// TypesFindingMessage defines model for types.FindingMessage.
type TypesFindingMessage struct {
	// Arguments Arguments to the finding rule.
	//
	// Mapped from `sarif.Runs.Results.Message.Arguments`.
	Arguments []string `json:"arguments"`

	// Header Short text description of finding rule.
	//
	// Could be sourced from `sarif.Runs.Tool.Driver.Rules.ShortDescription.Text`.
	Header string `json:"header"`

	// Markdown Markdown description of the finding rule.
	//
	// Mapped from `sarif.Runs.Results.Message.Markdown`.
	Markdown string `json:"markdown"`

	// Text Full text description of the finding rule.
	//
	// Mapped from `sarif.Runs.Results.Message.Text`.
	Text string `json:"text"`
}

// TypesFindingNumericalRating defines model for types.FindingNumericalRating.
type TypesFindingNumericalRating struct {
	Factors []RiskFactors `json:"factors"`
	Score   int           `json:"score"`
}

// TypesFindingRating The severity and risk rating of the vulnerability
type TypesFindingRating struct {
	// Justification Optional reason for rating the vulnerability like this
	Justification *string                      `json:"justification,omitempty"`
	Priority      *TypesFindingNumericalRating `json:"priority,omitempty"`
	Risk          *TypesFindingNumericalRating `json:"risk,omitempty"`

	// Severity A value which may be modified by enrichment stages.
	Severity struct {
		// OriginalValue Original value, if modified.
		OriginalValue *TypesFindingRatingSeverityOriginalValue `json:"original_value,omitempty"`

		// Reason Reason for the modification, if modified.
		Reason *TypesFindingRatingSeverityReason `json:"reason,omitempty"`

		// Value Current value.
		Value TypesFindingRatingSeverityValue `json:"value"`
	} `json:"severity"`
	SeverityMethod TypesFindingRatingSeverityMethod `json:"severity_method"`
}

// TypesFindingRatingSeverityOriginalValue Original value, if modified.
type TypesFindingRatingSeverityOriginalValue string

// TypesFindingRatingSeverityReason Reason for the modification, if modified.
type TypesFindingRatingSeverityReason string

// TypesFindingRatingSeverityValue Current value.
type TypesFindingRatingSeverityValue string

// TypesFindingRatingSeverityMethod defines model for TypesFindingRating.SeverityMethod.
type TypesFindingRatingSeverityMethod string

// TypesFindingRelationships Resources which may relate to a Finding.
type TypesFindingRelationships struct {
	// Autofixes Relate to autofixes for the finding, if available.
	Autofixes *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"autofixes,omitempty"`

	// Explanation Relate to a human-readable webpage that explains the finding, if available.
	Explanation *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"explanation,omitempty"`

	// FixDetails Relate to fix information for the finding, if available.
	FixDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"fix_details,omitempty"`

	// PolicyModifications Policy modifications applied to this finding, if available.
	PolicyModifications *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"policy_modifications,omitempty"`

	// RawDetails Relate to the raw scan outputs. May be SARIF, CycloneDX+VEX or other
	// scan-specific formats.
	//
	// The relationship link should point to the resource URL where the raw scan
	// output can be retrieved.
	//
	// The link MAY include a URL fragment to locate the finding's position within
	// the document object.
	//
	// For JSON-based MIME types, this fragment MUST be a JSON Pointer.
	// For XML-based MIME types, this fragment MUST be an XPath expression.
	//
	// If the fragment is specified, the fragment form MUST be compatible with all
	// of the content types advertised. For example, the link MUST NOT provide a JSON
	// Pointer fragment if an XML media type is advertised.
	RawDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink                `json:"links"`
		Meta  TypesFindingRelationships_RawDetails_Meta `json:"meta"`
	} `json:"raw_details,omitempty"`

	// Remediations Relate to remediations for the finding, if available.
	Remediations *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"remediations,omitempty"`

	// SastRuleDetails Relate to details about the rule which was violated in a SAST finding.
	SastRuleDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"sast_rule_details,omitempty"`

	// ScaVulnDetails Relate to details about the component vulnerability discovered in the SCA
	// finding.
	ScaVulnDetails *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"sca_vuln_details,omitempty"`
}

// TypesFindingRelationships_RawDetails_Meta defines model for TypesFindingRelationships.RawDetails.Meta.
type TypesFindingRelationships_RawDetails_Meta struct {
	// ContentTypes Content MIME types which can be used in the Accept header when requesting the
	// related raw data.
	//
	// This property must not be empty, making explicit what type of content
	// the API client will be receiving in the raw details resource response.
	ContentTypes         []string               `json:"content_types"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// TypesFindingResource FindingResource models a JSON API Finding resource.
type TypesFindingResource struct {
	// Attributes A Finding entity with a common format for all types of security scans. Notably, this is a sub-resource of a Test.
	Attributes TypesFindingAttributes `json:"attributes"`

	// Id Unique identity of this Finding instance.
	Id openapi_types.UUID `json:"id"`

	// Relationships Resources which may relate to a Finding.
	Relationships TypesFindingRelationships `json:"relationships"`
	Type          TypesFindingResourceType  `json:"type"`
}

// TypesFindingResourceType defines model for TypesFindingResource.Type.
type TypesFindingResourceType string

// TypesFindingsSummary Summary statistics about a Test's Findings.
type TypesFindingsSummary struct {
	Artifacts int                `json:"artifacts"`
	Counts    TypesFindingCounts `json:"counts"`
	Coverage  []TypesCoverage    `json:"coverage"`
	Path      string             `json:"path"`
	Type      string             `json:"type"`
}

// TypesFingerprintAssetV1 defines model for types.FingerprintAssetV1.
type TypesFingerprintAssetV1 struct {
	Scheme TypesFingerprintAssetV1Scheme `json:"scheme"`
	Value  string                        `json:"value"`
}

// TypesFingerprintAssetV1Scheme defines model for TypesFingerprintAssetV1.Scheme.
type TypesFingerprintAssetV1Scheme string

// TypesFingerprintProjectV1 defines model for types.FingerprintProjectV1.
type TypesFingerprintProjectV1 struct {
	Scheme TypesFingerprintProjectV1Scheme `json:"scheme"`
	Value  string                          `json:"value"`
}

// TypesFingerprintProjectV1Scheme defines model for TypesFingerprintProjectV1.Scheme.
type TypesFingerprintProjectV1Scheme string

// TypesFingerprintRepositoryV1 defines model for types.FingerprintRepositoryV1.
type TypesFingerprintRepositoryV1 struct {
	Scheme TypesFingerprintRepositoryV1Scheme `json:"scheme"`
	Value  string                             `json:"value"`
}

// TypesFingerprintRepositoryV1Scheme defines model for TypesFingerprintRepositoryV1.Scheme.
type TypesFingerprintRepositoryV1Scheme string

// TypesGitCommit Git commit SHA.
type TypesGitCommit = string

// TypesGitSCMInput Test input obtained from a Git SCM.
type TypesGitSCMInput struct {
	// Spec Git SCM import specification, which defines how to import content from a Git
	// SCM repository location into a workspace for testing, or a set of workspaces
	// for differential testing.
	Spec TypesGitScmImportSpec `json:"spec"`
	Type TypesGitSCMInputType  `json:"type"`
}

// TypesGitSCMInputType defines model for TypesGitSCMInput.Type.
type TypesGitSCMInputType string

// TypesGitScmImportSpec Git SCM import specification, which defines how to import content from a Git
// SCM repository location into a workspace for testing, or a set of workspaces
// for differential testing.
type TypesGitScmImportSpec struct {
	// Base base is optional. If provided, it is used in supplying differential test data.
	Base *TypesGitCommit `json:"base,omitempty"`

	// Branch branch is optional. If not provided, the default branch is used.
	Branch *string `json:"branch,omitempty"`

	// Exclude Components that should be excluded when importing the SCM contents into a Workspace.
	Exclude *[]ExcludeRule `json:"exclude,omitempty"`

	// RemoteUrl Git SCM repository URL.
	RemoteUrl string `json:"remote_url"`

	// Target target is optional. If not provided the current HEAD of the selected branch is used.
	//
	// If target is provided and branch is not, no branch metadata is associated with the test.
	// If target is provided and branch is, but target is not an ancestor of branch, the wrong
	// branch will be associated with a test. It is the caller's responsibility to ensure this is correct.
	Target *TypesGitCommit `json:"target,omitempty"`
}

// TypesIdentityFingerprint defines model for types.IdentityFingerprint.
type TypesIdentityFingerprint struct {
	Scheme TypesIdentityFingerprintScheme `json:"scheme"`
	Value  string                         `json:"value"`
}

// TypesIdentityFingerprintScheme defines model for TypesIdentityFingerprint.Scheme.
type TypesIdentityFingerprintScheme string

// TypesLegacyDeepcodeBundleAddress Legacy Deepcode API bundle.
//
// This is provided provisionally for compatibility purposes.
type TypesLegacyDeepcodeBundleAddress struct {
	// BundleId Legacy Deepcode bundle ID is a sha256 sum (64 hex digits).
	BundleId string                                 `json:"bundle_id"`
	Scheme   TypesLegacyDeepcodeBundleAddressScheme `json:"scheme"`
}

// TypesLegacyDeepcodeBundleAddressScheme defines model for TypesLegacyDeepcodeBundleAddress.Scheme.
type TypesLegacyDeepcodeBundleAddressScheme string

// TypesLine defines model for types.Line.
type TypesLine struct {
	Line       string `json:"line"`
	LineChange string `json:"lineChange"`
	LineNumber int    `json:"lineNumber"`
}

// TypesOtherObjectExcludeRule OtherObjectExcludeRule is a placeholder expansion value, for when types of exclusion rules
// were used in testing that are not present in the called version of the API.
type TypesOtherObjectExcludeRule struct {
	Type                 TypesOtherObjectExcludeRuleType `json:"type"`
	AdditionalProperties map[string]interface{}          `json:"-"`
}

// TypesOtherObjectExcludeRuleType defines model for TypesOtherObjectExcludeRule.Type.
type TypesOtherObjectExcludeRuleType string

// TypesPackageObject PackageObject represents a decomposed Package URL, enriched with a resolved
// package repository root location. This disambiguates public packages from
// private packages in security SCA and remediation.
type TypesPackageObject struct {
	// Meta Free-form metadata about this package.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`

	// Name Package name, possibly with a namespace prefix.
	Name string `json:"name"`

	// Root Package management system root location.
	//
	// If set, isolates the package to a private ecosystem repository.
	//
	// Defaults to "the canonical public ecosystem repository root" for the package ecosystem type.
	Root *string `json:"root,omitempty"`

	// Subpath Sub-package qualifier, if applicable.
	Subpath *string `json:"subpath,omitempty"`

	// Type Package management system or ecosystem type.
	Type string `json:"type"`

	// Version Package version. One would hope this is semver but this generally depends
	// on the ecosystem and its package standards and requirements.
	Version string `json:"version"`
}

// TypesPackageURL Package information represented in Package URL (pURL) form.
type TypesPackageURL = string

// TypesPolicyv1 defines model for types.Policyv1.
type TypesPolicyv1 struct {
	// OriginalLevel The original severity generated by the code scanner before any policy modifications.
	OriginalLevel    *string `json:"originalLevel,omitempty"`
	OriginalSeverity *string `json:"originalSeverity,omitempty"`
	Severity         *string `json:"severity,omitempty"`
}

// TypesReferenceId defines model for types.ReferenceId.
type TypesReferenceId struct {
	Identifier string `json:"identifier"`
	Index      int    `json:"index"`
}

// TypesRules Based on Sarif rules
type TypesRules struct {
	DefaultConfiguration struct {
		Level string `json:"level"`
	} `json:"defaultConfiguration"`
	Help struct {
		Markdown string `json:"markdown"`
		Text     string `json:"text"`
	} `json:"help"`
	Id         string `json:"id"`
	Name       string `json:"name"`
	Properties struct {
		Categories                []string                `json:"categories"`
		Cwe                       []string                `json:"cwe"`
		ExampleCommitDescriptions []string                `json:"exampleCommitDescriptions"`
		ExampleCommitFixes        []TypesExampleCommitFix `json:"exampleCommitFixes"`
		Precision                 string                  `json:"precision"`
		RepoDatasetSize           int                     `json:"repoDatasetSize"`
		Tags                      []string                `json:"tags"`
	} `json:"properties"`
	ShortDescription struct {
		Text string `json:"text"`
	} `json:"shortDescription"`
}

// TypesScaProblemFingerprint defines model for types.ScaProblemFingerprint.
type TypesScaProblemFingerprint struct {
	Scheme TypesScaProblemFingerprintScheme `json:"scheme"`
	Value  string                           `json:"value"`
}

// TypesScaProblemFingerprintScheme defines model for TypesScaProblemFingerprint.Scheme.
type TypesScaProblemFingerprintScheme string

// TypesScanType Security scan type. The scan type determines what types of attributes one
// might expect to find in the finding.
type TypesScanType string

// TypesSuggestedOther SuggestedOther that aren't yet defined in this API version.
type TypesSuggestedOther struct {
	Type                 TypesSuggestedOtherType `json:"type"`
	AdditionalProperties map[string]interface{}  `json:"-"`
}

// TypesSuggestedOtherType defines model for TypesSuggestedOther.Type.
type TypesSuggestedOtherType string

// TypesSuggestedPackageUpgrade SuggestedPackageUpgrade provides some basic information on how to mitigate an
// SCA finding in a managed package ecosystem with an upgrade.
//
// The upgrade does not take into account other dependency paths to the affected
// package which may have conflicting constraints. The upgrade version may
// introduce other vulnerabilities. This is the main difference between a
// suggestion and a remediation.
//
// For a comprehensive mitigation with satisfiability and security guarantees,
// the remediation relation should be used.
//
// If conflicts are known to exist this may be reported, but the absense of this
// flag should not be taken as a guarantee conflicts will not be encountered. It
// only means the conflict status is unknown.
type TypesSuggestedPackageUpgrade struct {
	// CurrentPackage Affected package.
	CurrentPackage Package                          `json:"current_package"`
	Type           TypesSuggestedPackageUpgradeType `json:"type"`

	// UpgradeConflicts Indicate whether the upgrade version is known to conflict with other
	// dependencies on the same package.
	//
	// If false, the upgrade does not conflict and should be applicable.
	//
	// If null or missing, conflict status is unknown or was not calculated;
	// applying the upgrade could fail.
	UpgradeConflicts *TypesSuggestedPackageUpgradeUpgradeConflicts `json:"upgrade_conflicts"`

	// UpgradePackage Upgrade package in which the vulnerability is no longer present.
	//
	// If unset, no upgrade version is available.
	UpgradePackage *Package `json:"upgrade_package,omitempty"`
}

// TypesSuggestedPackageUpgradeType defines model for TypesSuggestedPackageUpgrade.Type.
type TypesSuggestedPackageUpgradeType string

// TypesSuggestedPackageUpgradeUpgradeConflicts Indicate whether the upgrade version is known to conflict with other
// dependencies on the same package.
//
// If false, the upgrade does not conflict and should be applicable.
//
// If null or missing, conflict status is unknown or was not calculated;
// applying the upgrade could fail.
type TypesSuggestedPackageUpgradeUpgradeConflicts bool

// TypesSuppression Reasons for why a Finding can be suppressed from a Test result. This MAY NOT be required at all, given the presentation
type TypesSuppression struct {
	// Details Suppression meta data
	Details       *TypesSuppressionDetails `json:"details,omitempty"`
	Justification *string                  `json:"justification,omitempty"`
	Kind          TypesSuppressionKind     `json:"kind"`
}

// TypesSuppressionKind defines model for TypesSuppression.Kind.
type TypesSuppressionKind string

// TypesSuppressionDetails Suppression meta data
type TypesSuppressionDetails struct {
	Category   string `json:"category"`
	Expiration string `json:"expiration"`

	// IgnoredBy User definition
	IgnoredBy TypesUser `json:"ignoredBy"`
	IgnoredOn string    `json:"ignoredOn"`
}

// TypesTestContext TestContext identifies the context in which this Test occurs.
type TypesTestContext struct {
	// GitScmBranch Git SCM branch associated with the content, if known.
	//
	// This allows providing the Git SCM branch as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on a feature branch.
	GitScmBranch *string `json:"git_scm_branch,omitempty"`

	// GitScmUrl Git SCM URL associated with the content, if known.
	//
	// This allows providing the Git SCM URL as context in cases where the input
	// is not directly imported from a Git SCM repository.
	//
	// For example, a developer working in an IDE on source code which was cloned
	// from, and will be proposed for merging back into, an SCM repository.
	GitScmUrl *string `json:"git_scm_url,omitempty"`

	// SdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
	// `other` is returned if the test was created with a newer version of
	// the API including a new SDLC stage, not supported in the version of
	// the API used for retrieval.
	SdlcStage TypesTestContextSdlcStage `json:"sdlc_stage"`
}

// TypesTestContextSdlcStage Indicate at which point in the SDLC lifecycle the test was executed.
// `other` is returned if the test was created with a newer version of
// the API including a new SDLC stage, not supported in the version of
// the API used for retrieval.
type TypesTestContextSdlcStage string

// TypesTestError An error that occurred during a Test.
type TypesTestError struct {
	// Code Error code, references Snyk error catalog.
	Code string `json:"code"`

	// Links Links to error detail information.
	Links *IoSnykApiCommonErrorLink `json:"links,omitempty"`

	// Meta Free-form metadata associated with the error.
	Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`

	// Reason Descriptive reason for the error.
	Reason *string `json:"reason,omitempty"`
}

// TypesTestExecStatus defines model for types.TestExecStatus.
type TypesTestExecStatus string

// TypesTestOptions TestOptions defines options which determine how the Test is conducted.
// In includes the fields used in create test options, but in a backwards compatible manner.
type TypesTestOptions struct {
	// Exclude Files from which findings should be excluded and removed from
	// results.
	//
	// This is different from FindingAttributes.suppressions; the exclude is an
	// up-front declaration that findings in the excluded files are
	// immaterial to the test result (pass/fail), and should not be reported at all.
	//
	// Excluded files might still be used to link other files/findings though. For
	// example, a SAST (source-to-sink) or SCA analysis (transitive dependency
	// chain) might transit an excluded file, enabling discovery in a
	// non-excluded file.
	Exclude *[]ExcludeRule `json:"exclude,omitempty"`
}

// TypesTestOutcome The outcome of a Test; pass or fail. It is possible for the Test to show
// failure before the overall status has completed.
type TypesTestOutcome struct {
	Reason *TypesTestOutcomeReason `json:"reason,omitempty"`
	Result TypesTestOutcomeResult  `json:"result"`
}

// TypesTestOutcomeReason defines model for TypesTestOutcome.Reason.
type TypesTestOutcomeReason string

// TypesTestOutcomeResult defines model for TypesTestOutcome.Result.
type TypesTestOutcomeResult string

// TypesTestRelationships Resources related to a test.
type TypesTestRelationships struct {
	// Findings Relationship link to the findings collection for this test.
	Findings struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"findings"`

	// Logs Relate to application-facing logs produced by the test.
	Logs *struct {
		Data *struct {
			Id   openapi_types.UUID `json:"id"`
			Type string             `json:"type"`
		} `json:"data,omitempty"`
		Links IoSnykApiCommonRelatedLink `json:"links"`

		// Meta Free-form object that may contain non-standard information.
		Meta *IoSnykApiCommonMeta `json:"meta,omitempty"`
	} `json:"logs,omitempty"`
}

// TypesTestResource TestResource models a JSON API Test resource.
type TypesTestResource struct {
	// Attributes Summary-level attributes of a test.
	Attributes struct {
		// Context Test context; pertinent information important to associate with the outcome
		// of the test and its further processing, but is not directly used in the
		// test.
		//
		// These are worth modeling with a concrete type, rather than as generic
		// free-form metadata to communicate to consumers of the test what values are
		// available.
		Context *TypesTestContext `json:"context,omitempty"`

		// Options TestOptions are arguments which were used to configure the test and determine the
		// behavior of how it is conducted.
		//
		// Options are optional when creating a test and may be derived from other
		// sources, such as a test configuration policy if not specified. Provided
		// options may be merged with or overridden by such policy.
		//
		// In the requested Test resource, these options will reflect the effective
		// options resolved and applied to the execution of the test.
		Options *TypesTestOptions `json:"options,omitempty"`

		// Outcome Overall outcome of the security test: pass or fail.
		//
		// This outcome may indicate failure early even while the test is still
		// running to completion.
		Outcome TypesTestOutcome `json:"outcome"`

		// State State of the test, which should be polled to status "running" or "done"
		// before unmarshaling into this type.
		State TypesTestState `json:"state"`

		// Summary Summary of all the findings discovered by all the security scans conducted
		// for this test.
		Summary TypesFindingsSummary `json:"summary"`
	} `json:"attributes"`

	// Id Test resource ID. A unique ID assigned to each created test.
	Id openapi_types.UUID `json:"id"`

	// Relationships Resources related to a test.
	Relationships TypesTestRelationships `json:"relationships"`

	// Type Test resource type.
	Type TypesTestResourceType `json:"type"`
}

// TypesTestResourceType Test resource type.
type TypesTestResourceType string

// TypesTestState The state of a Test execution. Does not include the pass or fail.
type TypesTestState struct {
	// Errors Errors that occurred during the test execution.
	Errors *TypesTestError `json:"errors,omitempty"`

	// Status Test execution status.
	Status TypesTestExecStatus `json:"status"`
}

// TypesThreadFlow defines model for types.ThreadFlow.
type TypesThreadFlow struct {
	Locations []IoSnykReactiveFindingSourceLocation `json:"locations"`
}

// TypesUser User definition
type TypesUser struct {
	Email string `json:"email"`
	Name  string `json:"name"`
}

// TypesVulnerabilityFactRiskFactor defines model for types.VulnerabilityFactRiskFactor.
type TypesVulnerabilityFactRiskFactor struct {
	Factor TypesVulnerabilityFactRiskFactorFactor `json:"factor"`
	Name   string                                 `json:"name"`
	Value  bool                                   `json:"value"`
}

// TypesVulnerabilityFactRiskFactorFactor defines model for TypesVulnerabilityFactRiskFactor.Factor.
type TypesVulnerabilityFactRiskFactorFactor string

// TypesVulnerabilityGenericFactor defines model for types.VulnerabilityGenericFactor.
type TypesVulnerabilityGenericFactor struct {
	Factor TypesVulnerabilityGenericFactorFactor `json:"factor"`
	Name   string                                `json:"name"`
	Value  bool                                  `json:"value"`
}

// TypesVulnerabilityGenericFactorFactor defines model for TypesVulnerabilityGenericFactor.Factor.
type TypesVulnerabilityGenericFactorFactor string

// TypesVulnerabilityInstanceFactRiskFactor defines model for types.VulnerabilityInstanceFactRiskFactor.
type TypesVulnerabilityInstanceFactRiskFactor struct {
	Factor TypesVulnerabilityInstanceFactRiskFactorFactor `json:"factor"`
	Name   string                                         `json:"name"`
	Value  bool                                           `json:"value"`
}

// TypesVulnerabilityInstanceFactRiskFactorFactor defines model for TypesVulnerabilityInstanceFactRiskFactor.Factor.
type TypesVulnerabilityInstanceFactRiskFactorFactor string

// TypesWorkspaceV1Address Workspace v1 content storage address.
//
// TODO: Update this as needed.
type TypesWorkspaceV1Address struct {
	Scheme TypesWorkspaceV1AddressScheme `json:"scheme"`

	// WorkspaceId Workspace v1 is a sha256 sum (64 hex digits).
	WorkspaceId string `json:"workspace_id"`
}

// TypesWorkspaceV1AddressScheme defines model for TypesWorkspaceV1Address.Scheme.
type TypesWorkspaceV1AddressScheme string

// IoSnykApiRequestPaginatedRequestEndingBefore defines model for io.snyk.api.request.PaginatedRequest.ending_before.
type IoSnykApiRequestPaginatedRequestEndingBefore = string

// IoSnykApiRequestPaginatedRequestLimit defines model for io.snyk.api.request.PaginatedRequest.limit.
type IoSnykApiRequestPaginatedRequestLimit = int8

// IoSnykApiRequestPaginatedRequestStartingAfter defines model for io.snyk.api.request.PaginatedRequest.starting_after.
type IoSnykApiRequestPaginatedRequestStartingAfter = string

// IoSnykApiRequestSnykApiRequestInteractionId defines model for io.snyk.api.request.SnykApiRequest.interactionId.
type IoSnykApiRequestSnykApiRequestInteractionId = string

// IoSnykApiRequestSnykApiRequestRequestId defines model for io.snyk.api.request.SnykApiRequest.requestId.
type IoSnykApiRequestSnykApiRequestRequestId = openapi_types.UUID

// IoSnykApiRequestSnykApiRequestVersion defines model for io.snyk.api.request.SnykApiRequest.version.
type IoSnykApiRequestSnykApiRequestVersion = string

// TypesOrgIdParam defines model for types.OrgIdParam.
type TypesOrgIdParam = openapi_types.UUID

// TypesTestIdParam defines model for types.TestIdParam.
type TypesTestIdParam = openapi_types.UUID

// CreateTestParams defines parameters for CreateTest.
type CreateTestParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// GetTestParams defines parameters for GetTest.
type GetTestParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// ListFindingsParams defines parameters for ListFindings.
type ListFindingsParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// StartingAfter Opaque pagination cursor for forward traversal.
	StartingAfter *IoSnykApiRequestPaginatedRequestStartingAfter `form:"starting_after,omitempty" json:"starting_after,omitempty"`

	// EndingBefore Opaque pagination cursor for reverse traversal.
	EndingBefore *IoSnykApiRequestPaginatedRequestEndingBefore `form:"ending_before,omitempty" json:"ending_before,omitempty"`

	// Limit The number of items to return.
	Limit *IoSnykApiRequestPaginatedRequestLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// GetRulesParams defines parameters for GetRules.
type GetRulesParams struct {
	// Version The API version requested.
	Version IoSnykApiRequestSnykApiRequestVersion `form:"version" json:"version"`

	// SnykRequestId A unique ID assigned to each API request, for tracing and troubleshooting.
	//
	// Snyk clients can optionally provide this ID.
	SnykRequestId *IoSnykApiRequestSnykApiRequestRequestId `json:"snyk-request-id,omitempty"`

	// SnykInteractionId Identifies the Snyk client interaction in which this API request occurs.
	//
	// The identifier is an opaque string. though at the time of writing it may either be a
	// uuid or a urn containing a uuid and some metadata.
	// to be safe, the
	SnykInteractionId *IoSnykApiRequestSnykApiRequestInteractionId `json:"snyk-interaction-id,omitempty"`
}

// CreateTestJSONRequestBody defines body for CreateTest for application/json ContentType.
type CreateTestJSONRequestBody = TypesCreateTestAttributes

// Getter for additional properties for IoSnykApiCommonErrorLink. Returns the specified
// element and whether it was found
func (a IoSnykApiCommonErrorLink) Get(fieldName string) (value LinkProperty, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for IoSnykApiCommonErrorLink
func (a *IoSnykApiCommonErrorLink) Set(fieldName string, value LinkProperty) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]LinkProperty)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for IoSnykApiCommonErrorLink to handle AdditionalProperties
func (a *IoSnykApiCommonErrorLink) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["about"]; found {
		err = json.Unmarshal(raw, &a.About)
		if err != nil {
			return fmt.Errorf("error reading 'about': %w", err)
		}
		delete(object, "about")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]LinkProperty)
		for fieldName, fieldBuf := range object {
			var fieldVal LinkProperty
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for IoSnykApiCommonErrorLink to handle AdditionalProperties
func (a IoSnykApiCommonErrorLink) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.About != nil {
		object["about"], err = json.Marshal(a.About)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'about': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesFindingCounts_CountBy. Returns the specified
// element and whether it was found
func (a TypesFindingCounts_CountBy) Get(fieldName string) (value map[string]uint32, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesFindingCounts_CountBy
func (a *TypesFindingCounts_CountBy) Set(fieldName string, value map[string]uint32) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]uint32)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesFindingCounts_CountBy to handle AdditionalProperties
func (a *TypesFindingCounts_CountBy) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["severity"]; found {
		err = json.Unmarshal(raw, &a.Severity)
		if err != nil {
			return fmt.Errorf("error reading 'severity': %w", err)
		}
		delete(object, "severity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]uint32)
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]uint32
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesFindingCounts_CountBy to handle AdditionalProperties
func (a TypesFindingCounts_CountBy) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["severity"], err = json.Marshal(a.Severity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'severity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesFindingCounts_CountByAdjusted. Returns the specified
// element and whether it was found
func (a TypesFindingCounts_CountByAdjusted) Get(fieldName string) (value map[string]uint32, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesFindingCounts_CountByAdjusted
func (a *TypesFindingCounts_CountByAdjusted) Set(fieldName string, value map[string]uint32) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]uint32)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesFindingCounts_CountByAdjusted to handle AdditionalProperties
func (a *TypesFindingCounts_CountByAdjusted) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["severity"]; found {
		err = json.Unmarshal(raw, &a.Severity)
		if err != nil {
			return fmt.Errorf("error reading 'severity': %w", err)
		}
		delete(object, "severity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]uint32)
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]uint32
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesFindingCounts_CountByAdjusted to handle AdditionalProperties
func (a TypesFindingCounts_CountByAdjusted) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["severity"], err = json.Marshal(a.Severity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'severity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesFindingCounts_CountBySuppressed. Returns the specified
// element and whether it was found
func (a TypesFindingCounts_CountBySuppressed) Get(fieldName string) (value map[string]uint32, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesFindingCounts_CountBySuppressed
func (a *TypesFindingCounts_CountBySuppressed) Set(fieldName string, value map[string]uint32) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]map[string]uint32)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesFindingCounts_CountBySuppressed to handle AdditionalProperties
func (a *TypesFindingCounts_CountBySuppressed) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["severity"]; found {
		err = json.Unmarshal(raw, &a.Severity)
		if err != nil {
			return fmt.Errorf("error reading 'severity': %w", err)
		}
		delete(object, "severity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]map[string]uint32)
		for fieldName, fieldBuf := range object {
			var fieldVal map[string]uint32
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesFindingCounts_CountBySuppressed to handle AdditionalProperties
func (a TypesFindingCounts_CountBySuppressed) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["severity"], err = json.Marshal(a.Severity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'severity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesFindingCounts_CountKeyOrderAsc. Returns the specified
// element and whether it was found
func (a TypesFindingCounts_CountKeyOrderAsc) Get(fieldName string) (value []string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesFindingCounts_CountKeyOrderAsc
func (a *TypesFindingCounts_CountKeyOrderAsc) Set(fieldName string, value []string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string][]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesFindingCounts_CountKeyOrderAsc to handle AdditionalProperties
func (a *TypesFindingCounts_CountKeyOrderAsc) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["severity"]; found {
		err = json.Unmarshal(raw, &a.Severity)
		if err != nil {
			return fmt.Errorf("error reading 'severity': %w", err)
		}
		delete(object, "severity")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string][]string)
		for fieldName, fieldBuf := range object {
			var fieldVal []string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesFindingCounts_CountKeyOrderAsc to handle AdditionalProperties
func (a TypesFindingCounts_CountKeyOrderAsc) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["severity"], err = json.Marshal(a.Severity)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'severity': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesFindingRelationships_RawDetails_Meta. Returns the specified
// element and whether it was found
func (a TypesFindingRelationships_RawDetails_Meta) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesFindingRelationships_RawDetails_Meta
func (a *TypesFindingRelationships_RawDetails_Meta) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesFindingRelationships_RawDetails_Meta to handle AdditionalProperties
func (a *TypesFindingRelationships_RawDetails_Meta) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["content_types"]; found {
		err = json.Unmarshal(raw, &a.ContentTypes)
		if err != nil {
			return fmt.Errorf("error reading 'content_types': %w", err)
		}
		delete(object, "content_types")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesFindingRelationships_RawDetails_Meta to handle AdditionalProperties
func (a TypesFindingRelationships_RawDetails_Meta) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["content_types"], err = json.Marshal(a.ContentTypes)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'content_types': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesOtherObjectExcludeRule. Returns the specified
// element and whether it was found
func (a TypesOtherObjectExcludeRule) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesOtherObjectExcludeRule
func (a *TypesOtherObjectExcludeRule) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesOtherObjectExcludeRule to handle AdditionalProperties
func (a *TypesOtherObjectExcludeRule) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesOtherObjectExcludeRule to handle AdditionalProperties
func (a TypesOtherObjectExcludeRule) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for TypesSuggestedOther. Returns the specified
// element and whether it was found
func (a TypesSuggestedOther) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for TypesSuggestedOther
func (a *TypesSuggestedOther) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for TypesSuggestedOther to handle AdditionalProperties
func (a *TypesSuggestedOther) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["type"]; found {
		err = json.Unmarshal(raw, &a.Type)
		if err != nil {
			return fmt.Errorf("error reading 'type': %w", err)
		}
		delete(object, "type")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for TypesSuggestedOther to handle AdditionalProperties
func (a TypesSuggestedOther) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["type"], err = json.Marshal(a.Type)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'type': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// AsTypesLegacyDeepcodeBundleAddress returns the union data inside the ContentAddress as a TypesLegacyDeepcodeBundleAddress
func (t ContentAddress) AsTypesLegacyDeepcodeBundleAddress() (TypesLegacyDeepcodeBundleAddress, error) {
	var body TypesLegacyDeepcodeBundleAddress
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesLegacyDeepcodeBundleAddress overwrites any union data inside the ContentAddress as the provided TypesLegacyDeepcodeBundleAddress
func (t *ContentAddress) FromTypesLegacyDeepcodeBundleAddress(v TypesLegacyDeepcodeBundleAddress) error {
	v.Scheme = "deepcode-bundle"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesLegacyDeepcodeBundleAddress performs a merge with any union data inside the ContentAddress, using the provided TypesLegacyDeepcodeBundleAddress
func (t *ContentAddress) MergeTypesLegacyDeepcodeBundleAddress(v TypesLegacyDeepcodeBundleAddress) error {
	v.Scheme = "deepcode-bundle"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesWorkspaceV1Address returns the union data inside the ContentAddress as a TypesWorkspaceV1Address
func (t ContentAddress) AsTypesWorkspaceV1Address() (TypesWorkspaceV1Address, error) {
	var body TypesWorkspaceV1Address
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesWorkspaceV1Address overwrites any union data inside the ContentAddress as the provided TypesWorkspaceV1Address
func (t *ContentAddress) FromTypesWorkspaceV1Address(v TypesWorkspaceV1Address) error {
	v.Scheme = "workspace-v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesWorkspaceV1Address performs a merge with any union data inside the ContentAddress, using the provided TypesWorkspaceV1Address
func (t *ContentAddress) MergeTypesWorkspaceV1Address(v TypesWorkspaceV1Address) error {
	v.Scheme = "workspace-v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ContentAddress) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"scheme"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ContentAddress) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "deepcode-bundle":
		return t.AsTypesLegacyDeepcodeBundleAddress()
	case "workspace-v1":
		return t.AsTypesWorkspaceV1Address()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ContentAddress) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ContentAddress) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsCreateExcludeRule0 returns the union data inside the CreateExcludeRule as a CreateExcludeRule0
func (t CreateExcludeRule) AsCreateExcludeRule0() (CreateExcludeRule0, error) {
	var body CreateExcludeRule0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateExcludeRule0 overwrites any union data inside the CreateExcludeRule as the provided CreateExcludeRule0
func (t *CreateExcludeRule) FromCreateExcludeRule0(v CreateExcludeRule0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateExcludeRule0 performs a merge with any union data inside the CreateExcludeRule, using the provided CreateExcludeRule0
func (t *CreateExcludeRule) MergeCreateExcludeRule0(v CreateExcludeRule0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsCreateObjectExcludeRule returns the union data inside the CreateExcludeRule as a CreateObjectExcludeRule
func (t CreateExcludeRule) AsCreateObjectExcludeRule() (CreateObjectExcludeRule, error) {
	var body CreateObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromCreateObjectExcludeRule overwrites any union data inside the CreateExcludeRule as the provided CreateObjectExcludeRule
func (t *CreateExcludeRule) FromCreateObjectExcludeRule(v CreateObjectExcludeRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeCreateObjectExcludeRule performs a merge with any union data inside the CreateExcludeRule, using the provided CreateObjectExcludeRule
func (t *CreateExcludeRule) MergeCreateObjectExcludeRule(v CreateObjectExcludeRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsExcludeRule0 returns the union data inside the ExcludeRule as a ExcludeRule0
func (t ExcludeRule) AsExcludeRule0() (ExcludeRule0, error) {
	var body ExcludeRule0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromExcludeRule0 overwrites any union data inside the ExcludeRule as the provided ExcludeRule0
func (t *ExcludeRule) FromExcludeRule0(v ExcludeRule0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeExcludeRule0 performs a merge with any union data inside the ExcludeRule, using the provided ExcludeRule0
func (t *ExcludeRule) MergeExcludeRule0(v ExcludeRule0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsObjectExcludeRule returns the union data inside the ExcludeRule as a ObjectExcludeRule
func (t ExcludeRule) AsObjectExcludeRule() (ObjectExcludeRule, error) {
	var body ObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromObjectExcludeRule overwrites any union data inside the ExcludeRule as the provided ObjectExcludeRule
func (t *ExcludeRule) FromObjectExcludeRule(v ObjectExcludeRule) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeObjectExcludeRule performs a merge with any union data inside the ExcludeRule, using the provided ObjectExcludeRule
func (t *ExcludeRule) MergeObjectExcludeRule(v ObjectExcludeRule) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesCodeSastFingerprintV0 returns the union data inside the Fingerprint as a TypesCodeSastFingerprintV0
func (t Fingerprint) AsTypesCodeSastFingerprintV0() (TypesCodeSastFingerprintV0, error) {
	var body TypesCodeSastFingerprintV0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesCodeSastFingerprintV0 overwrites any union data inside the Fingerprint as the provided TypesCodeSastFingerprintV0
func (t *Fingerprint) FromTypesCodeSastFingerprintV0(v TypesCodeSastFingerprintV0) error {
	v.Scheme = "code-sast-v0"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesCodeSastFingerprintV0 performs a merge with any union data inside the Fingerprint, using the provided TypesCodeSastFingerprintV0
func (t *Fingerprint) MergeTypesCodeSastFingerprintV0(v TypesCodeSastFingerprintV0) error {
	v.Scheme = "code-sast-v0"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesCodeSastFingerprintV1 returns the union data inside the Fingerprint as a TypesCodeSastFingerprintV1
func (t Fingerprint) AsTypesCodeSastFingerprintV1() (TypesCodeSastFingerprintV1, error) {
	var body TypesCodeSastFingerprintV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesCodeSastFingerprintV1 overwrites any union data inside the Fingerprint as the provided TypesCodeSastFingerprintV1
func (t *Fingerprint) FromTypesCodeSastFingerprintV1(v TypesCodeSastFingerprintV1) error {
	v.Scheme = "code-sast-v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesCodeSastFingerprintV1 performs a merge with any union data inside the Fingerprint, using the provided TypesCodeSastFingerprintV1
func (t *Fingerprint) MergeTypesCodeSastFingerprintV1(v TypesCodeSastFingerprintV1) error {
	v.Scheme = "code-sast-v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesScaProblemFingerprint returns the union data inside the Fingerprint as a TypesScaProblemFingerprint
func (t Fingerprint) AsTypesScaProblemFingerprint() (TypesScaProblemFingerprint, error) {
	var body TypesScaProblemFingerprint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesScaProblemFingerprint overwrites any union data inside the Fingerprint as the provided TypesScaProblemFingerprint
func (t *Fingerprint) FromTypesScaProblemFingerprint(v TypesScaProblemFingerprint) error {
	v.Scheme = "sca-problem"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesScaProblemFingerprint performs a merge with any union data inside the Fingerprint, using the provided TypesScaProblemFingerprint
func (t *Fingerprint) MergeTypesScaProblemFingerprint(v TypesScaProblemFingerprint) error {
	v.Scheme = "sca-problem"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesIdentityFingerprint returns the union data inside the Fingerprint as a TypesIdentityFingerprint
func (t Fingerprint) AsTypesIdentityFingerprint() (TypesIdentityFingerprint, error) {
	var body TypesIdentityFingerprint
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesIdentityFingerprint overwrites any union data inside the Fingerprint as the provided TypesIdentityFingerprint
func (t *Fingerprint) FromTypesIdentityFingerprint(v TypesIdentityFingerprint) error {
	v.Scheme = "identity"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesIdentityFingerprint performs a merge with any union data inside the Fingerprint, using the provided TypesIdentityFingerprint
func (t *Fingerprint) MergeTypesIdentityFingerprint(v TypesIdentityFingerprint) error {
	v.Scheme = "identity"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesFingerprintProjectV1 returns the union data inside the Fingerprint as a TypesFingerprintProjectV1
func (t Fingerprint) AsTypesFingerprintProjectV1() (TypesFingerprintProjectV1, error) {
	var body TypesFingerprintProjectV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesFingerprintProjectV1 overwrites any union data inside the Fingerprint as the provided TypesFingerprintProjectV1
func (t *Fingerprint) FromTypesFingerprintProjectV1(v TypesFingerprintProjectV1) error {
	v.Scheme = "snyk/org/project/finding/v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesFingerprintProjectV1 performs a merge with any union data inside the Fingerprint, using the provided TypesFingerprintProjectV1
func (t *Fingerprint) MergeTypesFingerprintProjectV1(v TypesFingerprintProjectV1) error {
	v.Scheme = "snyk/org/project/finding/v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesFingerprintRepositoryV1 returns the union data inside the Fingerprint as a TypesFingerprintRepositoryV1
func (t Fingerprint) AsTypesFingerprintRepositoryV1() (TypesFingerprintRepositoryV1, error) {
	var body TypesFingerprintRepositoryV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesFingerprintRepositoryV1 overwrites any union data inside the Fingerprint as the provided TypesFingerprintRepositoryV1
func (t *Fingerprint) FromTypesFingerprintRepositoryV1(v TypesFingerprintRepositoryV1) error {
	v.Scheme = "snyk/org/repository/finding/v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesFingerprintRepositoryV1 performs a merge with any union data inside the Fingerprint, using the provided TypesFingerprintRepositoryV1
func (t *Fingerprint) MergeTypesFingerprintRepositoryV1(v TypesFingerprintRepositoryV1) error {
	v.Scheme = "snyk/org/repository/finding/v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesFingerprintAssetV1 returns the union data inside the Fingerprint as a TypesFingerprintAssetV1
func (t Fingerprint) AsTypesFingerprintAssetV1() (TypesFingerprintAssetV1, error) {
	var body TypesFingerprintAssetV1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesFingerprintAssetV1 overwrites any union data inside the Fingerprint as the provided TypesFingerprintAssetV1
func (t *Fingerprint) FromTypesFingerprintAssetV1(v TypesFingerprintAssetV1) error {
	v.Scheme = "snyk/asset/finding/v1"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesFingerprintAssetV1 performs a merge with any union data inside the Fingerprint, using the provided TypesFingerprintAssetV1
func (t *Fingerprint) MergeTypesFingerprintAssetV1(v TypesFingerprintAssetV1) error {
	v.Scheme = "snyk/asset/finding/v1"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Fingerprint) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"scheme"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Fingerprint) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "code-sast-v0":
		return t.AsTypesCodeSastFingerprintV0()
	case "code-sast-v1":
		return t.AsTypesCodeSastFingerprintV1()
	case "identity":
		return t.AsTypesIdentityFingerprint()
	case "sca-problem":
		return t.AsTypesScaProblemFingerprint()
	case "snyk/asset/finding/v1":
		return t.AsTypesFingerprintAssetV1()
	case "snyk/org/project/finding/v1":
		return t.AsTypesFingerprintProjectV1()
	case "snyk/org/repository/finding/v1":
		return t.AsTypesFingerprintRepositoryV1()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Fingerprint) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Fingerprint) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsIoSnykApiCommonLinkString returns the union data inside the LinkProperty as a IoSnykApiCommonLinkString
func (t LinkProperty) AsIoSnykApiCommonLinkString() (IoSnykApiCommonLinkString, error) {
	var body IoSnykApiCommonLinkString
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIoSnykApiCommonLinkString overwrites any union data inside the LinkProperty as the provided IoSnykApiCommonLinkString
func (t *LinkProperty) FromIoSnykApiCommonLinkString(v IoSnykApiCommonLinkString) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIoSnykApiCommonLinkString performs a merge with any union data inside the LinkProperty, using the provided IoSnykApiCommonLinkString
func (t *LinkProperty) MergeIoSnykApiCommonLinkString(v IoSnykApiCommonLinkString) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsIoSnykApiCommonLinkObject returns the union data inside the LinkProperty as a IoSnykApiCommonLinkObject
func (t LinkProperty) AsIoSnykApiCommonLinkObject() (IoSnykApiCommonLinkObject, error) {
	var body IoSnykApiCommonLinkObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromIoSnykApiCommonLinkObject overwrites any union data inside the LinkProperty as the provided IoSnykApiCommonLinkObject
func (t *LinkProperty) FromIoSnykApiCommonLinkObject(v IoSnykApiCommonLinkObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeIoSnykApiCommonLinkObject performs a merge with any union data inside the LinkProperty, using the provided IoSnykApiCommonLinkObject
func (t *LinkProperty) MergeIoSnykApiCommonLinkObject(v IoSnykApiCommonLinkObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkProperty) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkProperty) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesFileObjectExcludeRule returns the union data inside the ObjectExcludeRule as a TypesFileObjectExcludeRule
func (t ObjectExcludeRule) AsTypesFileObjectExcludeRule() (TypesFileObjectExcludeRule, error) {
	var body TypesFileObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesFileObjectExcludeRule overwrites any union data inside the ObjectExcludeRule as the provided TypesFileObjectExcludeRule
func (t *ObjectExcludeRule) FromTypesFileObjectExcludeRule(v TypesFileObjectExcludeRule) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesFileObjectExcludeRule performs a merge with any union data inside the ObjectExcludeRule, using the provided TypesFileObjectExcludeRule
func (t *ObjectExcludeRule) MergeTypesFileObjectExcludeRule(v TypesFileObjectExcludeRule) error {
	v.Type = "file"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesOtherObjectExcludeRule returns the union data inside the ObjectExcludeRule as a TypesOtherObjectExcludeRule
func (t ObjectExcludeRule) AsTypesOtherObjectExcludeRule() (TypesOtherObjectExcludeRule, error) {
	var body TypesOtherObjectExcludeRule
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesOtherObjectExcludeRule overwrites any union data inside the ObjectExcludeRule as the provided TypesOtherObjectExcludeRule
func (t *ObjectExcludeRule) FromTypesOtherObjectExcludeRule(v TypesOtherObjectExcludeRule) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesOtherObjectExcludeRule performs a merge with any union data inside the ObjectExcludeRule, using the provided TypesOtherObjectExcludeRule
func (t *ObjectExcludeRule) MergeTypesOtherObjectExcludeRule(v TypesOtherObjectExcludeRule) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ObjectExcludeRule) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t ObjectExcludeRule) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "file":
		return t.AsTypesFileObjectExcludeRule()
	case "other":
		return t.AsTypesOtherObjectExcludeRule()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t ObjectExcludeRule) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ObjectExcludeRule) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesPackageURL returns the union data inside the Package as a TypesPackageURL
func (t Package) AsTypesPackageURL() (TypesPackageURL, error) {
	var body TypesPackageURL
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesPackageURL overwrites any union data inside the Package as the provided TypesPackageURL
func (t *Package) FromTypesPackageURL(v TypesPackageURL) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesPackageURL performs a merge with any union data inside the Package, using the provided TypesPackageURL
func (t *Package) MergeTypesPackageURL(v TypesPackageURL) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesPackageObject returns the union data inside the Package as a TypesPackageObject
func (t Package) AsTypesPackageObject() (TypesPackageObject, error) {
	var body TypesPackageObject
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesPackageObject overwrites any union data inside the Package as the provided TypesPackageObject
func (t *Package) FromTypesPackageObject(v TypesPackageObject) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesPackageObject performs a merge with any union data inside the Package, using the provided TypesPackageObject
func (t *Package) MergeTypesPackageObject(v TypesPackageObject) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Package) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Package) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesBusinessCriticalityRiskFactor returns the union data inside the RiskFactors as a TypesBusinessCriticalityRiskFactor
func (t RiskFactors) AsTypesBusinessCriticalityRiskFactor() (TypesBusinessCriticalityRiskFactor, error) {
	var body TypesBusinessCriticalityRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesBusinessCriticalityRiskFactor overwrites any union data inside the RiskFactors as the provided TypesBusinessCriticalityRiskFactor
func (t *RiskFactors) FromTypesBusinessCriticalityRiskFactor(v TypesBusinessCriticalityRiskFactor) error {
	v.Factor = "business-criticality"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesBusinessCriticalityRiskFactor performs a merge with any union data inside the RiskFactors, using the provided TypesBusinessCriticalityRiskFactor
func (t *RiskFactors) MergeTypesBusinessCriticalityRiskFactor(v TypesBusinessCriticalityRiskFactor) error {
	v.Factor = "business-criticality"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesCvssRiskFactor returns the union data inside the RiskFactors as a TypesCvssRiskFactor
func (t RiskFactors) AsTypesCvssRiskFactor() (TypesCvssRiskFactor, error) {
	var body TypesCvssRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesCvssRiskFactor overwrites any union data inside the RiskFactors as the provided TypesCvssRiskFactor
func (t *RiskFactors) FromTypesCvssRiskFactor(v TypesCvssRiskFactor) error {
	v.Factor = "cvss"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesCvssRiskFactor performs a merge with any union data inside the RiskFactors, using the provided TypesCvssRiskFactor
func (t *RiskFactors) MergeTypesCvssRiskFactor(v TypesCvssRiskFactor) error {
	v.Factor = "cvss"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesEpssRiskFactor returns the union data inside the RiskFactors as a TypesEpssRiskFactor
func (t RiskFactors) AsTypesEpssRiskFactor() (TypesEpssRiskFactor, error) {
	var body TypesEpssRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesEpssRiskFactor overwrites any union data inside the RiskFactors as the provided TypesEpssRiskFactor
func (t *RiskFactors) FromTypesEpssRiskFactor(v TypesEpssRiskFactor) error {
	v.Factor = "epss"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesEpssRiskFactor performs a merge with any union data inside the RiskFactors, using the provided TypesEpssRiskFactor
func (t *RiskFactors) MergeTypesEpssRiskFactor(v TypesEpssRiskFactor) error {
	v.Factor = "epss"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesVulnerabilityFactRiskFactor returns the union data inside the RiskFactors as a TypesVulnerabilityFactRiskFactor
func (t RiskFactors) AsTypesVulnerabilityFactRiskFactor() (TypesVulnerabilityFactRiskFactor, error) {
	var body TypesVulnerabilityFactRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesVulnerabilityFactRiskFactor overwrites any union data inside the RiskFactors as the provided TypesVulnerabilityFactRiskFactor
func (t *RiskFactors) FromTypesVulnerabilityFactRiskFactor(v TypesVulnerabilityFactRiskFactor) error {
	v.Factor = "vulnerability-fact"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesVulnerabilityFactRiskFactor performs a merge with any union data inside the RiskFactors, using the provided TypesVulnerabilityFactRiskFactor
func (t *RiskFactors) MergeTypesVulnerabilityFactRiskFactor(v TypesVulnerabilityFactRiskFactor) error {
	v.Factor = "vulnerability-fact"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesVulnerabilityInstanceFactRiskFactor returns the union data inside the RiskFactors as a TypesVulnerabilityInstanceFactRiskFactor
func (t RiskFactors) AsTypesVulnerabilityInstanceFactRiskFactor() (TypesVulnerabilityInstanceFactRiskFactor, error) {
	var body TypesVulnerabilityInstanceFactRiskFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesVulnerabilityInstanceFactRiskFactor overwrites any union data inside the RiskFactors as the provided TypesVulnerabilityInstanceFactRiskFactor
func (t *RiskFactors) FromTypesVulnerabilityInstanceFactRiskFactor(v TypesVulnerabilityInstanceFactRiskFactor) error {
	v.Factor = "vulnerability-instance-fact"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesVulnerabilityInstanceFactRiskFactor performs a merge with any union data inside the RiskFactors, using the provided TypesVulnerabilityInstanceFactRiskFactor
func (t *RiskFactors) MergeTypesVulnerabilityInstanceFactRiskFactor(v TypesVulnerabilityInstanceFactRiskFactor) error {
	v.Factor = "vulnerability-instance-fact"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesVulnerabilityGenericFactor returns the union data inside the RiskFactors as a TypesVulnerabilityGenericFactor
func (t RiskFactors) AsTypesVulnerabilityGenericFactor() (TypesVulnerabilityGenericFactor, error) {
	var body TypesVulnerabilityGenericFactor
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesVulnerabilityGenericFactor overwrites any union data inside the RiskFactors as the provided TypesVulnerabilityGenericFactor
func (t *RiskFactors) FromTypesVulnerabilityGenericFactor(v TypesVulnerabilityGenericFactor) error {
	v.Factor = "vulnerability-generic-fact"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesVulnerabilityGenericFactor performs a merge with any union data inside the RiskFactors, using the provided TypesVulnerabilityGenericFactor
func (t *RiskFactors) MergeTypesVulnerabilityGenericFactor(v TypesVulnerabilityGenericFactor) error {
	v.Factor = "vulnerability-generic-fact"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t RiskFactors) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"factor"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t RiskFactors) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "business-criticality":
		return t.AsTypesBusinessCriticalityRiskFactor()
	case "cvss":
		return t.AsTypesCvssRiskFactor()
	case "epss":
		return t.AsTypesEpssRiskFactor()
	case "vulnerability-fact":
		return t.AsTypesVulnerabilityFactRiskFactor()
	case "vulnerability-generic-fact":
		return t.AsTypesVulnerabilityGenericFactor()
	case "vulnerability-instance-fact":
		return t.AsTypesVulnerabilityInstanceFactRiskFactor()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t RiskFactors) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *RiskFactors) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesSuggestedPackageUpgrade returns the union data inside the Suggestion as a TypesSuggestedPackageUpgrade
func (t Suggestion) AsTypesSuggestedPackageUpgrade() (TypesSuggestedPackageUpgrade, error) {
	var body TypesSuggestedPackageUpgrade
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesSuggestedPackageUpgrade overwrites any union data inside the Suggestion as the provided TypesSuggestedPackageUpgrade
func (t *Suggestion) FromTypesSuggestedPackageUpgrade(v TypesSuggestedPackageUpgrade) error {
	v.Type = "package-upgrade"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesSuggestedPackageUpgrade performs a merge with any union data inside the Suggestion, using the provided TypesSuggestedPackageUpgrade
func (t *Suggestion) MergeTypesSuggestedPackageUpgrade(v TypesSuggestedPackageUpgrade) error {
	v.Type = "package-upgrade"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesSuggestedOther returns the union data inside the Suggestion as a TypesSuggestedOther
func (t Suggestion) AsTypesSuggestedOther() (TypesSuggestedOther, error) {
	var body TypesSuggestedOther
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesSuggestedOther overwrites any union data inside the Suggestion as the provided TypesSuggestedOther
func (t *Suggestion) FromTypesSuggestedOther(v TypesSuggestedOther) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesSuggestedOther performs a merge with any union data inside the Suggestion, using the provided TypesSuggestedOther
func (t *Suggestion) MergeTypesSuggestedOther(v TypesSuggestedOther) error {
	v.Type = "other"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t Suggestion) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t Suggestion) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "other":
		return t.AsTypesSuggestedOther()
	case "package-upgrade":
		return t.AsTypesSuggestedPackageUpgrade()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t Suggestion) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Suggestion) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsTypesGitSCMInput returns the union data inside the TestInput as a TypesGitSCMInput
func (t TestInput) AsTypesGitSCMInput() (TypesGitSCMInput, error) {
	var body TypesGitSCMInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesGitSCMInput overwrites any union data inside the TestInput as the provided TypesGitSCMInput
func (t *TestInput) FromTypesGitSCMInput(v TypesGitSCMInput) error {
	v.Type = "git-scm"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesGitSCMInput performs a merge with any union data inside the TestInput, using the provided TypesGitSCMInput
func (t *TestInput) MergeTypesGitSCMInput(v TypesGitSCMInput) error {
	v.Type = "git-scm"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsTypesContentAddressInput returns the union data inside the TestInput as a TypesContentAddressInput
func (t TestInput) AsTypesContentAddressInput() (TypesContentAddressInput, error) {
	var body TypesContentAddressInput
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTypesContentAddressInput overwrites any union data inside the TestInput as the provided TypesContentAddressInput
func (t *TestInput) FromTypesContentAddressInput(v TypesContentAddressInput) error {
	v.Type = "content-address"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTypesContentAddressInput performs a merge with any union data inside the TestInput, using the provided TypesContentAddressInput
func (t *TestInput) MergeTypesContentAddressInput(v TypesContentAddressInput) error {
	v.Type = "content-address"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t TestInput) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t TestInput) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "content-address":
		return t.AsTypesContentAddressInput()
	case "git-scm":
		return t.AsTypesGitSCMInput()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t TestInput) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *TestInput) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
