// Code generated by MockGen. DO NOT EDIT.
// Source: progressbar.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockProgressBar is a mock of ProgressBar interface.
type MockProgressBar struct {
	ctrl     *gomock.Controller
	recorder *MockProgressBarMockRecorder
}

// MockProgressBarMockRecorder is the mock recorder for MockProgressBar.
type MockProgressBarMockRecorder struct {
	mock *MockProgressBar
}

// NewMockProgressBar creates a new mock instance.
func NewMockProgressBar(ctrl *gomock.Controller) *MockProgressBar {
	mock := &MockProgressBar{ctrl: ctrl}
	mock.recorder = &MockProgressBarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressBar) EXPECT() *MockProgressBarMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockProgressBar) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockProgressBarMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockProgressBar)(nil).Clear))
}

// SetTitle mocks base method.
func (m *MockProgressBar) SetTitle(title string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTitle", title)
}

// SetTitle indicates an expected call of SetTitle.
func (mr *MockProgressBarMockRecorder) SetTitle(title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTitle", reflect.TypeOf((*MockProgressBar)(nil).SetTitle), title)
}

// UpdateProgress mocks base method.
func (m *MockProgressBar) UpdateProgress(progress float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgress", progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockProgressBarMockRecorder) UpdateProgress(progress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockProgressBar)(nil).UpdateProgress), progress)
}
