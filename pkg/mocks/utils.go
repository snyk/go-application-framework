// Code generated by MockGen. DO NOT EDIT.
// Source: outputs.go

// Package mocks is a generated GoMock package.
package mocks

import (
	fs "io/fs"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	utils "github.com/snyk/go-application-framework/pkg/utils"
)

// MockStdOut is a mock of StdOut interface.
type MockStdOut struct {
	ctrl     *gomock.Controller
	recorder *MockStdOutMockRecorder
}

// MockStdOutMockRecorder is the mock recorder for MockStdOut.
type MockStdOutMockRecorder struct {
	mock *MockStdOut
}

// NewMockStdOut creates a new mock instance.
func NewMockStdOut(ctrl *gomock.Controller) *MockStdOut {
	mock := &MockStdOut{ctrl: ctrl}
	mock.recorder = &MockStdOutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStdOut) EXPECT() *MockStdOutMockRecorder {
	return m.recorder
}

// Println mocks base method.
func (m *MockStdOut) Println(a ...any) (int, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a_2 := range a {
		varargs = append(varargs, a_2)
	}
	ret := m.ctrl.Call(m, "Println", varargs...)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Println indicates an expected call of Println.
func (mr *MockStdOutMockRecorder) Println(a ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockStdOut)(nil).Println), a...)
}

// MockFileOut is a mock of FileOut interface.
type MockFileOut struct {
	ctrl     *gomock.Controller
	recorder *MockFileOutMockRecorder
}

// MockFileOutMockRecorder is the mock recorder for MockFileOut.
type MockFileOutMockRecorder struct {
	mock *MockFileOut
}

// NewMockFileOut creates a new mock instance.
func NewMockFileOut(ctrl *gomock.Controller) *MockFileOut {
	mock := &MockFileOut{ctrl: ctrl}
	mock.recorder = &MockFileOutMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOut) EXPECT() *MockFileOutMockRecorder {
	return m.recorder
}

// Remove mocks base method.
func (m *MockFileOut) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileOutMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileOut)(nil).Remove), name)
}

// WriteFile mocks base method.
func (m *MockFileOut) WriteFile(filename string, data []byte, perm fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", filename, data, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFileOutMockRecorder) WriteFile(filename, data, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFileOut)(nil).WriteFile), filename, data, perm)
}

// MockOutputDestination is a mock of OutputDestination interface.
type MockOutputDestination struct {
	ctrl     *gomock.Controller
	recorder *MockOutputDestinationMockRecorder
}

// MockOutputDestinationMockRecorder is the mock recorder for MockOutputDestination.
type MockOutputDestinationMockRecorder struct {
	mock *MockOutputDestination
}

// NewMockOutputDestination creates a new mock instance.
func NewMockOutputDestination(ctrl *gomock.Controller) *MockOutputDestination {
	mock := &MockOutputDestination{ctrl: ctrl}
	mock.recorder = &MockOutputDestinationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOutputDestination) EXPECT() *MockOutputDestinationMockRecorder {
	return m.recorder
}

// FileOut mocks base method.
func (m *MockOutputDestination) FileOut() utils.FileOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileOut")
	ret0, _ := ret[0].(utils.FileOut)
	return ret0
}

// FileOut indicates an expected call of FileOut.
func (mr *MockOutputDestinationMockRecorder) FileOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileOut", reflect.TypeOf((*MockOutputDestination)(nil).FileOut))
}

// StdOut mocks base method.
func (m *MockOutputDestination) StdOut() utils.StdOut {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StdOut")
	ret0, _ := ret[0].(utils.StdOut)
	return ret0
}

// StdOut indicates an expected call of StdOut.
func (mr *MockOutputDestinationMockRecorder) StdOut() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StdOut", reflect.TypeOf((*MockOutputDestination)(nil).StdOut))
}
