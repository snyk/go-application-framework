// Code generated by MockGen. DO NOT EDIT.
// Source: authenticator.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AddAuthenticationHeader mocks base method.
func (m *MockAuthenticator) AddAuthenticationHeader(request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthenticationHeader", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthenticationHeader indicates an expected call of AddAuthenticationHeader.
func (mr *MockAuthenticatorMockRecorder) AddAuthenticationHeader(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthenticationHeader", reflect.TypeOf((*MockAuthenticator)(nil).AddAuthenticationHeader), request)
}

// Authenticate mocks base method.
func (m *MockAuthenticator) Authenticate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockAuthenticatorMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockAuthenticator)(nil).Authenticate))
}

// IsSupported mocks base method.
func (m *MockAuthenticator) IsSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupported indicates an expected call of IsSupported.
func (mr *MockAuthenticatorMockRecorder) IsSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupported", reflect.TypeOf((*MockAuthenticator)(nil).IsSupported))
}

// MockCancelableAuthenticator is a mock of CancelableAuthenticator interface.
type MockCancelableAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockCancelableAuthenticatorMockRecorder
}

// MockCancelableAuthenticatorMockRecorder is the mock recorder for MockCancelableAuthenticator.
type MockCancelableAuthenticatorMockRecorder struct {
	mock *MockCancelableAuthenticator
}

// NewMockCancelableAuthenticator creates a new mock instance.
func NewMockCancelableAuthenticator(ctrl *gomock.Controller) *MockCancelableAuthenticator {
	mock := &MockCancelableAuthenticator{ctrl: ctrl}
	mock.recorder = &MockCancelableAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCancelableAuthenticator) EXPECT() *MockCancelableAuthenticatorMockRecorder {
	return m.recorder
}

// AddAuthenticationHeader mocks base method.
func (m *MockCancelableAuthenticator) AddAuthenticationHeader(request *http.Request) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAuthenticationHeader", request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthenticationHeader indicates an expected call of AddAuthenticationHeader.
func (mr *MockCancelableAuthenticatorMockRecorder) AddAuthenticationHeader(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthenticationHeader", reflect.TypeOf((*MockCancelableAuthenticator)(nil).AddAuthenticationHeader), request)
}

// Authenticate mocks base method.
func (m *MockCancelableAuthenticator) Authenticate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Authenticate indicates an expected call of Authenticate.
func (mr *MockCancelableAuthenticatorMockRecorder) Authenticate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticate", reflect.TypeOf((*MockCancelableAuthenticator)(nil).Authenticate))
}

// CancelableAuthenticate mocks base method.
func (m *MockCancelableAuthenticator) CancelableAuthenticate(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelableAuthenticate", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelableAuthenticate indicates an expected call of CancelableAuthenticate.
func (mr *MockCancelableAuthenticatorMockRecorder) CancelableAuthenticate(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelableAuthenticate", reflect.TypeOf((*MockCancelableAuthenticator)(nil).CancelableAuthenticate), ctx)
}

// IsSupported mocks base method.
func (m *MockCancelableAuthenticator) IsSupported() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSupported")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSupported indicates an expected call of IsSupported.
func (mr *MockCancelableAuthenticatorMockRecorder) IsSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSupported", reflect.TypeOf((*MockCancelableAuthenticator)(nil).IsSupported))
}
