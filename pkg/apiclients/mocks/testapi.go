// Code generated by MockGen. DO NOT EDIT.
// Source: testapi.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	testapi "github.com/snyk/go-application-framework/pkg/apiclients/testapi"
)

// MockTestHandle is a mock of TestHandle interface.
type MockTestHandle struct {
	ctrl     *gomock.Controller
	recorder *MockTestHandleMockRecorder
}

// MockTestHandleMockRecorder is the mock recorder for MockTestHandle.
type MockTestHandleMockRecorder struct {
	mock *MockTestHandle
}

// NewMockTestHandle creates a new mock instance.
func NewMockTestHandle(ctrl *gomock.Controller) *MockTestHandle {
	mock := &MockTestHandle{ctrl: ctrl}
	mock.recorder = &MockTestHandleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestHandle) EXPECT() *MockTestHandleMockRecorder {
	return m.recorder
}

// Done mocks base method.
func (m *MockTestHandle) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockTestHandleMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTestHandle)(nil).Done))
}

// Result mocks base method.
func (m *MockTestHandle) Result() *testapi.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result")
	ret0, _ := ret[0].(*testapi.Result)
	return ret0
}

// Result indicates an expected call of Result.
func (mr *MockTestHandleMockRecorder) Result() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockTestHandle)(nil).Result))
}

// Wait mocks base method.
func (m *MockTestHandle) Wait(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTestHandleMockRecorder) Wait(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTestHandle)(nil).Wait), ctx)
}

// MockTestClient is a mock of TestClient interface.
type MockTestClient struct {
	ctrl     *gomock.Controller
	recorder *MockTestClientMockRecorder
}

// MockTestClientMockRecorder is the mock recorder for MockTestClient.
type MockTestClientMockRecorder struct {
	mock *MockTestClient
}

// NewMockTestClient creates a new mock instance.
func NewMockTestClient(ctrl *gomock.Controller) *MockTestClient {
	mock := &MockTestClient{ctrl: ctrl}
	mock.recorder = &MockTestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestClient) EXPECT() *MockTestClientMockRecorder {
	return m.recorder
}

// StartTest mocks base method.
func (m *MockTestClient) StartTest(ctx context.Context, params testapi.StartTestParams) (testapi.TestHandle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartTest", ctx, params)
	ret0, _ := ret[0].(testapi.TestHandle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartTest indicates an expected call of StartTest.
func (mr *MockTestClientMockRecorder) StartTest(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockTestClient)(nil).StartTest), ctx, params)
}
