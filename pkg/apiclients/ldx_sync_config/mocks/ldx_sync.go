// Code generated by MockGen. DO NOT EDIT.
// Source: ldx_sync.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v20241015 "github.com/snyk/go-application-framework/pkg/apiclients/ldx_sync_config/ldx_sync/2024-10-15"
)

// MockHttpRequestDoer is a mock of HttpRequestDoer interface.
type MockHttpRequestDoer struct {
	ctrl     *gomock.Controller
	recorder *MockHttpRequestDoerMockRecorder
}

// MockHttpRequestDoerMockRecorder is the mock recorder for MockHttpRequestDoer.
type MockHttpRequestDoerMockRecorder struct {
	mock *MockHttpRequestDoer
}

// NewMockHttpRequestDoer creates a new mock instance.
func NewMockHttpRequestDoer(ctrl *gomock.Controller) *MockHttpRequestDoer {
	mock := &MockHttpRequestDoer{ctrl: ctrl}
	mock.recorder = &MockHttpRequestDoerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHttpRequestDoer) EXPECT() *MockHttpRequestDoerMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHttpRequestDoer) Do(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHttpRequestDoerMockRecorder) Do(req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHttpRequestDoer)(nil).Do), req)
}

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// CreateConfig mocks base method.
func (m *MockClientInterface) CreateConfig(ctx context.Context, params *v20241015.CreateConfigParams, body v20241015.CreateConfigJSONRequestBody, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfig indicates an expected call of CreateConfig.
func (mr *MockClientInterfaceMockRecorder) CreateConfig(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfig", reflect.TypeOf((*MockClientInterface)(nil).CreateConfig), varargs...)
}

// CreateConfigWithBody mocks base method.
func (m *MockClientInterface) CreateConfigWithBody(ctx context.Context, params *v20241015.CreateConfigParams, contentType string, body io.Reader, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigWithBody indicates an expected call of CreateConfigWithBody.
func (mr *MockClientInterfaceMockRecorder) CreateConfigWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigWithBody", reflect.TypeOf((*MockClientInterface)(nil).CreateConfigWithBody), varargs...)
}

// DeleteConfig mocks base method.
func (m *MockClientInterface) DeleteConfig(ctx context.Context, params *v20241015.DeleteConfigParams, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfig indicates an expected call of DeleteConfig.
func (mr *MockClientInterfaceMockRecorder) DeleteConfig(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfig", reflect.TypeOf((*MockClientInterface)(nil).DeleteConfig), varargs...)
}

// GetAPIVersion mocks base method.
func (m *MockClientInterface) GetAPIVersion(ctx context.Context, version string, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIVersion", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIVersion indicates an expected call of GetAPIVersion.
func (mr *MockClientInterfaceMockRecorder) GetAPIVersion(ctx, version interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIVersion", reflect.TypeOf((*MockClientInterface)(nil).GetAPIVersion), varargs...)
}

// GetConfig mocks base method.
func (m *MockClientInterface) GetConfig(ctx context.Context, params *v20241015.GetConfigParams, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockClientInterfaceMockRecorder) GetConfig(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockClientInterface)(nil).GetConfig), varargs...)
}

// ListAPIVersions mocks base method.
func (m *MockClientInterface) ListAPIVersions(ctx context.Context, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIVersions", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIVersions indicates an expected call of ListAPIVersions.
func (mr *MockClientInterfaceMockRecorder) ListAPIVersions(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIVersions", reflect.TypeOf((*MockClientInterface)(nil).ListAPIVersions), varargs...)
}

// UpdateConfig mocks base method.
func (m *MockClientInterface) UpdateConfig(ctx context.Context, params *v20241015.UpdateConfigParams, body v20241015.UpdateConfigJSONRequestBody, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfig", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfig indicates an expected call of UpdateConfig.
func (mr *MockClientInterfaceMockRecorder) UpdateConfig(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfig", reflect.TypeOf((*MockClientInterface)(nil).UpdateConfig), varargs...)
}

// UpdateConfigWithBody mocks base method.
func (m *MockClientInterface) UpdateConfigWithBody(ctx context.Context, params *v20241015.UpdateConfigParams, contentType string, body io.Reader, reqEditors ...v20241015.RequestEditorFn) (*http.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigWithBody", varargs...)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigWithBody indicates an expected call of UpdateConfigWithBody.
func (mr *MockClientInterfaceMockRecorder) UpdateConfigWithBody(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigWithBody", reflect.TypeOf((*MockClientInterface)(nil).UpdateConfigWithBody), varargs...)
}

// MockClientWithResponsesInterface is a mock of ClientWithResponsesInterface interface.
type MockClientWithResponsesInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientWithResponsesInterfaceMockRecorder
}

// MockClientWithResponsesInterfaceMockRecorder is the mock recorder for MockClientWithResponsesInterface.
type MockClientWithResponsesInterfaceMockRecorder struct {
	mock *MockClientWithResponsesInterface
}

// NewMockClientWithResponsesInterface creates a new mock instance.
func NewMockClientWithResponsesInterface(ctrl *gomock.Controller) *MockClientWithResponsesInterface {
	mock := &MockClientWithResponsesInterface{ctrl: ctrl}
	mock.recorder = &MockClientWithResponsesInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientWithResponsesInterface) EXPECT() *MockClientWithResponsesInterfaceMockRecorder {
	return m.recorder
}

// CreateConfigWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateConfigWithBodyWithResponse(ctx context.Context, params *v20241015.CreateConfigParams, contentType string, body io.Reader, reqEditors ...v20241015.RequestEditorFn) (*v20241015.CreateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.CreateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigWithBodyWithResponse indicates an expected call of CreateConfigWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateConfigWithBodyWithResponse(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateConfigWithBodyWithResponse), varargs...)
}

// CreateConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) CreateConfigWithResponse(ctx context.Context, params *v20241015.CreateConfigParams, body v20241015.CreateConfigJSONRequestBody, reqEditors ...v20241015.RequestEditorFn) (*v20241015.CreateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.CreateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConfigWithResponse indicates an expected call of CreateConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) CreateConfigWithResponse(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).CreateConfigWithResponse), varargs...)
}

// DeleteConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) DeleteConfigWithResponse(ctx context.Context, params *v20241015.DeleteConfigParams, reqEditors ...v20241015.RequestEditorFn) (*v20241015.DeleteConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.DeleteConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteConfigWithResponse indicates an expected call of DeleteConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) DeleteConfigWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).DeleteConfigWithResponse), varargs...)
}

// GetAPIVersionWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetAPIVersionWithResponse(ctx context.Context, version string, reqEditors ...v20241015.RequestEditorFn) (*v20241015.GetAPIVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, version}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAPIVersionWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.GetAPIVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIVersionWithResponse indicates an expected call of GetAPIVersionWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetAPIVersionWithResponse(ctx, version interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, version}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIVersionWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetAPIVersionWithResponse), varargs...)
}

// GetConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) GetConfigWithResponse(ctx context.Context, params *v20241015.GetConfigParams, reqEditors ...v20241015.RequestEditorFn) (*v20241015.GetConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.GetConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigWithResponse indicates an expected call of GetConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) GetConfigWithResponse(ctx, params interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).GetConfigWithResponse), varargs...)
}

// ListAPIVersionsWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) ListAPIVersionsWithResponse(ctx context.Context, reqEditors ...v20241015.RequestEditorFn) (*v20241015.ListAPIVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAPIVersionsWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.ListAPIVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAPIVersionsWithResponse indicates an expected call of ListAPIVersionsWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) ListAPIVersionsWithResponse(ctx interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAPIVersionsWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).ListAPIVersionsWithResponse), varargs...)
}

// UpdateConfigWithBodyWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateConfigWithBodyWithResponse(ctx context.Context, params *v20241015.UpdateConfigParams, contentType string, body io.Reader, reqEditors ...v20241015.RequestEditorFn) (*v20241015.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, contentType, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigWithBodyWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigWithBodyWithResponse indicates an expected call of UpdateConfigWithBodyWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateConfigWithBodyWithResponse(ctx, params, contentType, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, contentType, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigWithBodyWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateConfigWithBodyWithResponse), varargs...)
}

// UpdateConfigWithResponse mocks base method.
func (m *MockClientWithResponsesInterface) UpdateConfigWithResponse(ctx context.Context, params *v20241015.UpdateConfigParams, body v20241015.UpdateConfigJSONRequestBody, reqEditors ...v20241015.RequestEditorFn) (*v20241015.UpdateConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params, body}
	for _, a := range reqEditors {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateConfigWithResponse", varargs...)
	ret0, _ := ret[0].(*v20241015.UpdateConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConfigWithResponse indicates an expected call of UpdateConfigWithResponse.
func (mr *MockClientWithResponsesInterfaceMockRecorder) UpdateConfigWithResponse(ctx, params, body interface{}, reqEditors ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params, body}, reqEditors...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConfigWithResponse", reflect.TypeOf((*MockClientWithResponsesInterface)(nil).UpdateConfigWithResponse), varargs...)
}
