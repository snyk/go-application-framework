// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rs/zerolog (interfaces: LevelWriter)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	zerolog "github.com/rs/zerolog"
)

// MockLevelWriter is a mock of LevelWriter interface.
type MockLevelWriter struct {
	ctrl     *gomock.Controller
	recorder *MockLevelWriterMockRecorder
}

// MockLevelWriterMockRecorder is the mock recorder for MockLevelWriter.
type MockLevelWriterMockRecorder struct {
	mock *MockLevelWriter
}

// NewMockLevelWriter creates a new mock instance.
func NewMockLevelWriter(ctrl *gomock.Controller) *MockLevelWriter {
	mock := &MockLevelWriter{ctrl: ctrl}
	mock.recorder = &MockLevelWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLevelWriter) EXPECT() *MockLevelWriterMockRecorder {
	return m.recorder
}

// Write mocks base method.
func (m *MockLevelWriter) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockLevelWriterMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockLevelWriter)(nil).Write), arg0)
}

// WriteLevel mocks base method.
func (m *MockLevelWriter) WriteLevel(arg0 zerolog.Level, arg1 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteLevel", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteLevel indicates an expected call of WriteLevel.
func (mr *MockLevelWriterMockRecorder) WriteLevel(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteLevel", reflect.TypeOf((*MockLevelWriter)(nil).WriteLevel), arg0, arg1)
}
