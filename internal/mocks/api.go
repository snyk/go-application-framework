// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	contract "github.com/snyk/go-application-framework/internal/api/contract"
)

// MockApiClient is a mock of ApiClient interface.
type MockApiClient struct {
	ctrl     *gomock.Controller
	recorder *MockApiClientMockRecorder
}

// MockApiClientMockRecorder is the mock recorder for MockApiClient.
type MockApiClientMockRecorder struct {
	mock *MockApiClient
}

// NewMockApiClient creates a new mock instance.
func NewMockApiClient(ctrl *gomock.Controller) *MockApiClient {
	mock := &MockApiClient{ctrl: ctrl}
	mock.recorder = &MockApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApiClient) EXPECT() *MockApiClientMockRecorder {
	return m.recorder
}

// GetDefaultOrgId mocks base method.
func (m *MockApiClient) GetDefaultOrgId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultOrgId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDefaultOrgId indicates an expected call of GetDefaultOrgId.
func (mr *MockApiClientMockRecorder) GetDefaultOrgId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultOrgId", reflect.TypeOf((*MockApiClient)(nil).GetDefaultOrgId))
}

// GetFeatureFlag mocks base method.
func (m *MockApiClient) GetFeatureFlag(flagname, origId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeatureFlag", flagname, origId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeatureFlag indicates an expected call of GetFeatureFlag.
func (mr *MockApiClientMockRecorder) GetFeatureFlag(flagname, origId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeatureFlag", reflect.TypeOf((*MockApiClient)(nil).GetFeatureFlag), flagname, origId)
}

// GetOrgIdFromSlug mocks base method.
func (m *MockApiClient) GetOrgIdFromSlug(slugName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrgIdFromSlug", slugName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrgIdFromSlug indicates an expected call of GetOrgIdFromSlug.
func (mr *MockApiClientMockRecorder) GetOrgIdFromSlug(slugName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrgIdFromSlug", reflect.TypeOf((*MockApiClient)(nil).GetOrgIdFromSlug), slugName)
}

// GetSastSettings mocks base method.
func (m *MockApiClient) GetSastSettings(orgId string) (contract.SastResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSastSettings", orgId)
	ret0, _ := ret[0].(contract.SastResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSastSettings indicates an expected call of GetSastSettings.
func (mr *MockApiClientMockRecorder) GetSastSettings(orgId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSastSettings", reflect.TypeOf((*MockApiClient)(nil).GetSastSettings), orgId)
}

// GetSelf mocks base method.
func (m *MockApiClient) GetSelf() (contract.SelfResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelf")
	ret0, _ := ret[0].(contract.SelfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelf indicates an expected call of GetSelf.
func (mr *MockApiClientMockRecorder) GetSelf() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelf", reflect.TypeOf((*MockApiClient)(nil).GetSelf))
}

// GetSlugFromOrgId mocks base method.
func (m *MockApiClient) GetSlugFromOrgId(orgID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlugFromOrgId", orgID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlugFromOrgId indicates an expected call of GetSlugFromOrgId.
func (mr *MockApiClientMockRecorder) GetSlugFromOrgId(orgID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlugFromOrgId", reflect.TypeOf((*MockApiClient)(nil).GetSlugFromOrgId), orgID)
}

// GetUserMe mocks base method.
func (m *MockApiClient) GetUserMe() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserMe")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserMe indicates an expected call of GetUserMe.
func (mr *MockApiClientMockRecorder) GetUserMe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserMe", reflect.TypeOf((*MockApiClient)(nil).GetUserMe))
}

// Init mocks base method.
func (m *MockApiClient) Init(url string, client *http.Client) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Init", url, client)
}

// Init indicates an expected call of Init.
func (mr *MockApiClientMockRecorder) Init(url, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockApiClient)(nil).Init), url, client)
}
