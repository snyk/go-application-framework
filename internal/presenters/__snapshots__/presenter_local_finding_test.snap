
[TestPresenterLocalFinding_with_Issues - 1]

Testing path/to/project ...

Open Issues

[91mâœ— [HIGH][0m [1mServer-Side Request Forgery (SSRF)[0m
   Path: routes/profileImageUrlUpload.ts, line 22
   Info: Unsanitized input from the HTTP request body flows into request.get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.


â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Test Summary                                                   â”‚
â”‚                                                                â”‚
â”‚   Organization:                                                â”‚
â”‚   Test type:         Static code analysis                      â”‚
â”‚   Project path:      path/to/project                           â”‚
â”‚                                                                â”‚
â”‚   Total issues:   18                                           â”‚
â”‚   Ignored issues: [1m3[0m [ 0 CRITICAL [91m 2 HIGH [0m[93m 1 MEDIUM [0m 0 LOW ]    â”‚
â”‚   Open issues:    [1m5[0m [ 1 CRITICAL [91m 3 HIGH [0m[93m 1 MEDIUM [0m 0 LOW ]    â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

ðŸ’¡ Tip

    To view ignored issues, use the --include-ignores option.


---

[TestBoxStyle - 1]
â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ [91mâœ— [HIGH][0m [1mCleartext Transmission of Sensitive Information[0m                                                                                                                                                                                                                        â”‚
â”‚    Path: node_modules/qs/support/expresso/test/http.test.js, line 1                                                                                                                                                                                                             â”‚
â”‚    Info: http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.    â”‚
â”‚                                                                                                                                                                                                                                                                                 â”‚
â”‚                                                                                                                                                                                                                                                                                 â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
---

[TestFindingComponent - 1]
[91mâœ— [HIGH][0m [1mCleartext Transmission of Sensitive Information[0m
   Path: node_modules/qs/support/expresso/test/http.test.js, line 1
   Info: http.createServer uses HTTP which is an insecure protocol and should not be used in code due to cleartext transmission of information. Data in cleartext in a communication channel can be sniffed by unauthorized actors. Consider using the https module instead.


---

[TestPresenterLocalFinding_with_severityFilter - 1]

Testing path/to/project ...

Open Issues

[91mâœ— [HIGH][0m [1mServer-Side Request Forgery (SSRF)[0m
   Path: routes/profileImageUrlUpload.ts, line 22
   Info: Unsanitized input from the HTTP request body flows into request.get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.


ðŸ’¡ Tip

    You are currently viewing results with --severity-threshold applied.
    To view all issues, remove the --severity-threshold flag

â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Test Summary                                  â”‚
â”‚                                               â”‚
â”‚   Organization:                               â”‚
â”‚   Test type:         Static code analysis     â”‚
â”‚   Project path:      path/to/project          â”‚
â”‚                                               â”‚
â”‚   Total issues:   11                          â”‚
â”‚   Ignored issues: [1m2[0m [ 0 CRITICAL [91m 2 HIGH [0m]    â”‚
â”‚   Open issues:    [1m4[0m [ 1 CRITICAL [91m 3 HIGH [0m]    â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯

ðŸ’¡ Tip

    To view ignored issues, use the --include-ignores option.


---

[TestPresenterLocalFinding_with_ignored - 1]

Testing path/to/project ...

Open Issues

âœ— [HIGH] Server-Side Request Forgery (SSRF)
   Path: routes/profileImageUrlUpload.ts, line 22
   Info: Unsanitized input from the HTTP request body flows into request.get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.


â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Test Summary                                                   â”‚
â”‚                                                                â”‚
â”‚   Organization:                                                â”‚
â”‚   Test type:         Static code analysis                      â”‚
â”‚   Project path:      path/to/project                           â”‚
â”‚                                                                â”‚
â”‚   Total issues:   18                                           â”‚
â”‚   Ignored issues: 3 [ 0 CRITICAL  2 HIGH  1 MEDIUM  0 LOW ]    â”‚
â”‚   Open issues:    5 [ 1 CRITICAL  3 HIGH  1 MEDIUM  0 LOW ]    â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
---

[TestPresenterLocalFinding_with_includeIgnores - 1]

Testing path/to/project ...

Open Issues

[91mâœ— [HIGH][0m [1mServer-Side Request Forgery (SSRF)[0m
   Path: routes/profileImageUrlUpload.ts, line 22
   Info: Unsanitized input from the HTTP request body flows into request.get, where it is used as an URL to perform a request. This may result in a Server-Side Request Forgery vulnerability.


â•­â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•®
â”‚ Test Summary                                                   â”‚
â”‚                                                                â”‚
â”‚   Organization:                                                â”‚
â”‚   Test type:         Static code analysis                      â”‚
â”‚   Project path:      path/to/project                           â”‚
â”‚                                                                â”‚
â”‚   Total issues:   18                                           â”‚
â”‚   Ignored issues: [1m3[0m [ 0 CRITICAL [91m 2 HIGH [0m[93m 1 MEDIUM [0m 0 LOW ]    â”‚
â”‚   Open issues:    [1m5[0m [ 1 CRITICAL [91m 3 HIGH [0m[93m 1 MEDIUM [0m 0 LOW ]    â”‚
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
---
