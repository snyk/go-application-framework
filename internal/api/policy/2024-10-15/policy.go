// Package v20241015 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v20241015

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for CreatePolicyPayloadDataType.
const (
	CreatePolicyPayloadDataTypePolicy CreatePolicyPayloadDataType = "policy"
)

// Defines values for PolicyActionIgnoreDataIgnoreType.
const (
	NotVulnerable   PolicyActionIgnoreDataIgnoreType = "not-vulnerable"
	TemporaryIgnore PolicyActionIgnoreDataIgnoreType = "temporary-ignore"
	WontFix         PolicyActionIgnoreDataIgnoreType = "wont-fix"
)

// Defines values for PolicyAttributesActionType.
const (
	PolicyAttributesActionTypeIgnore PolicyAttributesActionType = "ignore"
)

// Defines values for PolicyConditionField.
const (
	Snykassetfindingv1 PolicyConditionField = "snyk/asset/finding/v1"
)

// Defines values for PolicyConditionOperator.
const (
	Includes PolicyConditionOperator = "includes"
)

// Defines values for PolicyConditionsGroupLogicalOperator.
const (
	And PolicyConditionsGroupLogicalOperator = "and"
)

// Defines values for PolicyEventResponseType.
const (
	PolicyEvent PolicyEventResponseType = "policy_event"
)

// Defines values for PolicyEventType.
const (
	Approve PolicyEventType = "approve"
	Cancel  PolicyEventType = "cancel"
	Create  PolicyEventType = "create"
	Edit    PolicyEventType = "edit"
	Reject  PolicyEventType = "reject"
	Reopen  PolicyEventType = "reopen"
)

// Defines values for PolicyResponseType.
const (
	PolicyResponseTypePolicy PolicyResponseType = "policy"
)

// Defines values for PolicyResponseAttributesActionType.
const (
	PolicyResponseAttributesActionTypeIgnore PolicyResponseAttributesActionType = "ignore"
)

// Defines values for PolicyReview.
const (
	PolicyReviewApproved    PolicyReview = "approved"
	PolicyReviewCancelled   PolicyReview = "cancelled"
	PolicyReviewNotRequired PolicyReview = "not-required"
	PolicyReviewPending     PolicyReview = "pending"
	PolicyReviewRejected    PolicyReview = "rejected"
)

// Defines values for UpdatePolicyPayloadDataType.
const (
	Policy UpdatePolicyPayloadDataType = "policy"
)

// Defines values for UpdatePolicyReview.
const (
	UpdatePolicyReviewApproved UpdatePolicyReview = "approved"
	UpdatePolicyReviewPending  UpdatePolicyReview = "pending"
	UpdatePolicyReviewRejected UpdatePolicyReview = "rejected"
)

// ActualVersion Resolved API version
type ActualVersion = string

// CreatePolicyPayload defines model for CreatePolicyPayload.
type CreatePolicyPayload struct {
	Data struct {
		Attributes PolicyAttributes `json:"attributes"`

		// Meta Free-form object that may contain non-standard information.
		Meta *Meta                       `json:"meta,omitempty"`
		Type CreatePolicyPayloadDataType `json:"type"`
	} `json:"data"`
}

// CreatePolicyPayloadDataType defines model for CreatePolicyPayload.Data.Type.
type CreatePolicyPayloadDataType string

// Error defines model for Error.
type Error struct {
	// Code An application-specific error code, expressed as a string value.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Id A unique identifier for this particular occurrence of the problem.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Links A link that leads to further details about this particular occurrance of the problem.
	Links  *ErrorLink              `json:"links,omitempty"`
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Source *struct {
		// Parameter A string indicating which URI query parameter caused the error.
		Parameter *string `json:"parameter,omitempty"`

		// Pointer A JSON Pointer [RFC6901] to the associated entity in the request document.
		Pointer *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// Status The HTTP status code applicable to this problem, expressed as a string value.
	Status string `json:"status"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// ErrorDocument defines model for ErrorDocument.
type ErrorDocument struct {
	Errors  []Error `json:"errors"`
	Jsonapi JsonApi `json:"jsonapi"`
}

// ErrorLink A link that leads to further details about this particular occurrance of the problem.
type ErrorLink struct {
	About *LinkProperty `json:"about,omitempty"`
}

// JsonApi defines model for JsonApi.
type JsonApi struct {
	// Version Version of the JSON API specification this server supports.
	Version string `json:"version"`
}

// LinkProperty defines model for LinkProperty.
type LinkProperty struct {
	union json.RawMessage
}

// LinkProperty0 A string containing the link’s URL
// LinkProperty0 A string containing the link’s URL.
type LinkProperty0 = string

// LinkProperty1 defines model for .
type LinkProperty1 struct {
	// Href A string containing the link’s URL.
	Href string `json:"href"`

	// Meta Free-form object that may contain non-standard information.
	Meta *Meta `json:"meta,omitempty"`
}

// Links defines model for Links.

// Meta Free-form object that may contain non-standard information.
type Meta map[string]interface{}

// PolicyActionIgnore defines model for PolicyActionIgnore.
type PolicyActionIgnore struct {
	Data PolicyActionIgnoreData `json:"data"`
}

// PolicyActionIgnoreData defines model for PolicyActionIgnoreData.
type PolicyActionIgnoreData struct {
	Expires    *time.Time                       `json:"expires,omitempty"`
	IgnoreType PolicyActionIgnoreDataIgnoreType `json:"ignore_type"`
	Reason     *string                          `json:"reason,omitempty"`
}

// PolicyActionIgnoreDataIgnoreType defines model for PolicyActionIgnoreData.IgnoreType.
type PolicyActionIgnoreDataIgnoreType string

// PolicyAttributes defines model for PolicyAttributes.
type PolicyAttributes struct {
	Action          PolicyActionIgnore         `json:"action"`
	ActionType      PolicyAttributesActionType `json:"action_type"`
	ConditionsGroup PolicyConditionsGroup      `json:"conditions_group"`
	Name            string                     `json:"name"`
}

// PolicyAttributesActionType defines model for PolicyAttributes.ActionType.
type PolicyAttributesActionType string

// PolicyCondition defines model for PolicyCondition.
type PolicyCondition struct {
	// Field field refers to the type of identifier used in the condition of the policy.  The available value is versioned and hierarchical:
	// - `snyk/assets/finding/v1` : identity of the finding scoped to a Snyk assets (e.g. a repository).
	// The identities can be extracted from the fingerprints section of the SARIF, which is accessible via the Snyk CLI. More details can be found in the [CLI documentation](https://docs.snyk.io/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results#export-test-results).
	Field PolicyConditionField `json:"field"`

	// Operator Operator for the field to value matching. Currently
	// only 'includes' is supported, which does an exact
	// string match on the value.
	Operator PolicyConditionOperator `json:"operator"`

	// Value The value of the field to match on.
	Value string `json:"value"`
}

// PolicyConditionField field refers to the type of identifier used in the condition of the policy.  The available value is versioned and hierarchical:
// - `snyk/assets/finding/v1` : identity of the finding scoped to a Snyk assets (e.g. a repository).
// The identities can be extracted from the fingerprints section of the SARIF, which is accessible via the Snyk CLI. More details can be found in the [CLI documentation](https://docs.snyk.io/snyk-cli/scan-and-maintain-projects-using-the-cli/snyk-cli-for-snyk-code/view-snyk-code-cli-results#export-test-results).
type PolicyConditionField string

// PolicyConditionOperator Operator for the field to value matching. Currently
// only 'includes' is supported, which does an exact
// string match on the value.
type PolicyConditionOperator string

// PolicyConditionsGroup defines model for PolicyConditionsGroup.
type PolicyConditionsGroup struct {
	Conditions []PolicyCondition `json:"conditions"`

	// LogicalOperator The logical operator for the policy condition. Currently only 'and' is supported.
	LogicalOperator PolicyConditionsGroupLogicalOperator `json:"logical_operator"`
}

// PolicyConditionsGroupLogicalOperator The logical operator for the policy condition. Currently only 'and' is supported.
type PolicyConditionsGroupLogicalOperator string

// PolicyEventAttributes defines model for PolicyEventAttributes.
type PolicyEventAttributes struct {
	Changes   PolicyEventChanges `json:"changes"`
	Comment   *string            `json:"comment,omitempty"`
	CreatedAt time.Time          `json:"created_at"`
	CreatedBy Principal          `json:"created_by"`
	Type      PolicyEventType    `json:"type"`
}

// PolicyEventChanges defines model for PolicyEventChanges.
type PolicyEventChanges struct {
	NewAction          *PolicyActionIgnore    `json:"new_action,omitempty"`
	NewConditionsGroup *PolicyConditionsGroup `json:"new_conditions_group,omitempty"`
	NewName            *string                `json:"new_name,omitempty"`

	// NewReview Review status.
	NewReview          *PolicyReview          `json:"new_review,omitempty"`
	OldAction          *PolicyActionIgnore    `json:"old_action,omitempty"`
	OldConditionsGroup *PolicyConditionsGroup `json:"old_conditions_group,omitempty"`
	OldName            *string                `json:"old_name,omitempty"`

	// OldReview Review status.
	OldReview *PolicyReview `json:"old_review,omitempty"`
}

// PolicyEventResponse defines model for PolicyEventResponse.
type PolicyEventResponse struct {
	Attributes PolicyEventAttributes `json:"attributes"`

	// Id A unique identifier for this event.
	Id   openapi_types.UUID      `json:"id"`
	Type PolicyEventResponseType `json:"type"`
}

// PolicyEventResponseType defines model for PolicyEventResponse.Type.
type PolicyEventResponseType string

// PolicyEventType defines model for PolicyEventType.
type PolicyEventType string

// PolicyResponse defines model for PolicyResponse.
type PolicyResponse struct {
	Attributes PolicyResponseAttributes `json:"attributes"`

	// Id A unique identifier for this particular occurrence of the policy.
	Id   openapi_types.UUID `json:"id"`
	Type PolicyResponseType `json:"type"`
}

// PolicyResponseType defines model for PolicyResponse.Type.
type PolicyResponseType string

// PolicyResponseAttributes defines model for PolicyResponseAttributes.
type PolicyResponseAttributes struct {
	Action          PolicyActionIgnore                 `json:"action"`
	ActionType      PolicyResponseAttributesActionType `json:"action_type"`
	ConditionsGroup PolicyConditionsGroup              `json:"conditions_group"`
	CreatedAt       time.Time                          `json:"created_at"`
	CreatedBy       *Principal                         `json:"created_by,omitempty"`
	Name            string                             `json:"name"`

	// Review Review status.
	Review    PolicyReview `json:"review"`
	UpdatedAt time.Time    `json:"updated_at"`
}

// PolicyResponseAttributesActionType defines model for PolicyResponseAttributes.ActionType.
type PolicyResponseAttributesActionType string

// PolicyReview Review status.
type PolicyReview string

// Principal defines model for Principal.
type Principal struct {
	Email *string `json:"email,omitempty"`

	// Id The Snyk ID corresponding to this user or service account that created the policy
	Id openapi_types.UUID `json:"id"`

	// Name Name of the user or service account that created the policy
	Name string `json:"name"`
}

// QueryVersion Requested API version
type QueryVersion = string

// SelfLink defines model for SelfLink.
type SelfLink struct {
	Self *LinkProperty `json:"self,omitempty"`
}

// UpdatePolicyAttributes Attributes of a policy that can be updated.
// At least one of 'name', 'conditions_group', 'action', or 'review' must be provided.
//
// In order to update the review field, the caller will need to have the
// "Review Ignore Request" permission.
type UpdatePolicyAttributes struct {
	Action          *PolicyActionIgnore    `json:"action,omitempty"`
	ConditionsGroup *PolicyConditionsGroup `json:"conditions_group,omitempty"`
	Name            *string                `json:"name,omitempty"`

	// Review Review update.
	//
	// To provide an optional message relating to the review state change, add a string 'message' property to the 'meta' object.
	Review *UpdatePolicyReview `json:"review,omitempty"`
}

// UpdatePolicyPayload defines model for UpdatePolicyPayload.
type UpdatePolicyPayload struct {
	Data struct {
		// Attributes Attributes of a policy that can be updated.
		// At least one of 'name', 'conditions_group', 'action', or 'review' must be provided.
		//
		// In order to update the review field, the caller will need to have the
		// "Review Ignore Request" permission.
		Attributes UpdatePolicyAttributes `json:"attributes"`

		// Id the UUID of the policy to update.
		Id *openapi_types.UUID `json:"id,omitempty"`

		// Meta Free-form object that may contain non-standard information.
		Meta *Meta                       `json:"meta,omitempty"`
		Type UpdatePolicyPayloadDataType `json:"type"`
	} `json:"data"`
}

// UpdatePolicyPayloadDataType defines model for UpdatePolicyPayload.Data.Type.
type UpdatePolicyPayloadDataType string

// UpdatePolicyReview Review update.
//
// To provide an optional message relating to the review state change, add a string 'message' property to the 'meta' object.
type UpdatePolicyReview string

// EndingBefore defines model for EndingBefore.
type EndingBefore = string

// Limit defines model for Limit.
type Limit = int32

// OrgId defines model for OrgId.
type OrgId = openapi_types.UUID

// PolicyId defines model for PolicyId.
type PolicyId = openapi_types.UUID

// Review defines model for Review.
type Review = []PolicyReview

// StartingAfter defines model for StartingAfter.
type StartingAfter = string

// Version Requested API version
type Version = QueryVersion

// N400 defines model for 400.
type N400 = ErrorDocument

// N401 defines model for 401.
type N401 = ErrorDocument

// N403 defines model for 403.
type N403 = ErrorDocument

// N404 defines model for 404.
type N404 = ErrorDocument

// N409 defines model for 409.
type N409 = ErrorDocument

// N500 defines model for 500.
type N500 = ErrorDocument

// GetOrgPoliciesParams defines parameters for GetOrgPolicies.
type GetOrgPoliciesParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`

	// StartingAfter Return the page of results immediately after this cursor
	StartingAfter *StartingAfter `form:"starting_after,omitempty" json:"starting_after,omitempty"`

	// EndingBefore Return the page of results immediately before this cursor
	EndingBefore *EndingBefore `form:"ending_before,omitempty" json:"ending_before,omitempty"`

	// Limit Number of results to return per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`

	// Review Policy rule review state e.g. approved
	Review *Review `form:"review,omitempty" json:"review,omitempty"`

	// ExpiresBefore Select only policies with an expiry strictly before the given time.
	ExpiresBefore *time.Time `form:"expires_before,omitempty" json:"expires_before,omitempty"`

	// ExpiresAfter Select only policies with an expiry strictly past the given time.
	ExpiresAfter *time.Time `form:"expires_after,omitempty" json:"expires_after,omitempty"`

	// ExpiresNever Select only policies that never expire.
	ExpiresNever *bool `form:"expires_never,omitempty" json:"expires_never,omitempty"`
}

// CreateOrgPolicyParams defines parameters for CreateOrgPolicy.
type CreateOrgPolicyParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// DeleteOrgPolicyParams defines parameters for DeleteOrgPolicy.
type DeleteOrgPolicyParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// GetOrgPolicyParams defines parameters for GetOrgPolicy.
type GetOrgPolicyParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// UpdateOrgPolicyParams defines parameters for UpdateOrgPolicy.
type UpdateOrgPolicyParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// GetOrgPolicyEventsParams defines parameters for GetOrgPolicyEvents.
type GetOrgPolicyEventsParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`

	// StartingAfter Return the page of results immediately after this cursor
	StartingAfter *StartingAfter `form:"starting_after,omitempty" json:"starting_after,omitempty"`

	// EndingBefore Return the page of results immediately before this cursor
	EndingBefore *EndingBefore `form:"ending_before,omitempty" json:"ending_before,omitempty"`

	// Limit Number of results to return per page
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateOrgPolicyApplicationVndAPIPlusJSONRequestBody defines body for CreateOrgPolicy for application/vnd.api+json ContentType.
type CreateOrgPolicyApplicationVndAPIPlusJSONRequestBody = CreatePolicyPayload

// UpdateOrgPolicyApplicationVndAPIPlusJSONRequestBody defines body for UpdateOrgPolicy for application/vnd.api+json ContentType.
type UpdateOrgPolicyApplicationVndAPIPlusJSONRequestBody = UpdatePolicyPayload

// AsLinkProperty0 returns the union data inside the LinkProperty as a LinkProperty0
func (t LinkProperty) AsLinkProperty0() (LinkProperty0, error) {
	var body LinkProperty0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkProperty0 overwrites any union data inside the LinkProperty as the provided LinkProperty0
func (t *LinkProperty) FromLinkProperty0(v LinkProperty0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkProperty0 performs a merge with any union data inside the LinkProperty, using the provided LinkProperty0
func (t *LinkProperty) MergeLinkProperty0(v LinkProperty0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinkProperty1 returns the union data inside the LinkProperty as a LinkProperty1
func (t LinkProperty) AsLinkProperty1() (LinkProperty1, error) {
	var body LinkProperty1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkProperty1 overwrites any union data inside the LinkProperty as the provided LinkProperty1
func (t *LinkProperty) FromLinkProperty1(v LinkProperty1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkProperty1 performs a merge with any union data inside the LinkProperty, using the provided LinkProperty1
func (t *LinkProperty) MergeLinkProperty1(v LinkProperty1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkProperty) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkProperty) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
