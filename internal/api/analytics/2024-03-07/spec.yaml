openapi: 3.0.0
x-snyk-api-stability: experimental
info:
  title: Snyk client analytics
  version: 3.0.0
  x-plural-name: analytics
  x-singular-name: analytics
servers:
  - url: /hidden
    description: Snyk Hidden API
tags:
  - name: Analytics
    description: Snyk client analytics
paths:
  /orgs/{org_id}/analytics:
    post:
      summary: Create analytics data
      description: Create analytics data for the specified organization.
      operationId: createAnalytics
      tags:
        - Analytics
      x-cerberus:
        authorization:
          resource:
            pathId: 'org_id'
            type: 'org'
            permissions:
              - read
      parameters:
        - name: version
          in: query
          required: true
          description: The requested version of the endpoint to process the request
          example: '2021-06-04'
          schema:
            $ref: '#/components/schemas/QueryVersion'
        - $ref: '#/components/parameters/OrgId'
      requestBody:
        description: The analytics payload
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnalyticsRequestBody'
      responses:
        '201':
          description: Successfully created analytics data.
          headers:
            snyk-version-requested:
              $ref: '#/components/headers/VersionRequestedResponseHeader'
            snyk-version-served:
              $ref: '#/components/headers/VersionServedResponseHeader'
            snyk-request-id:
              $ref: '#/components/headers/RequestIdResponseHeader'
            snyk-version-lifecycle-stage:
              $ref: '#/components/headers/VersionStageResponseHeader'
            deprecation:
              { $ref: '#/components/headers/DeprecationHeader' }
            sunset: { $ref: '#/components/headers/SunsetHeader' }
            location:
              $ref: '#/components/headers/LocationHeader'
          content:
            application/json:
              schema:
                type: object
                additionalProperties: false
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'

components:
  headers:
    VersionRequestedResponseHeader:
      description: A header containing the version of the endpoint requested by the caller.
      schema: { $ref: '#/components/schemas/QueryVersion' }
      example: '2021-06-04'

    VersionServedResponseHeader:
      description: A header containing the version of the endpoint that was served by the API.
      schema: { $ref: '#/components/schemas/ActualVersion' }
      example: '2021-06-04'

    VersionStageResponseHeader:
      description: >
        A header containing the version stage of the endpoint. This stage describes
        the guarantees snyk provides surrounding stability of the endpoint.
      schema:
        type: string
        enum:
          - wip
          - experimental
          - beta
          - ga
          - deprecated
          - sunset
        example: 'ga'

    DeprecationHeader:
      description: >
        A header containing the deprecation date of the underlying endpoint. For
        more information, please refer to the deprecation header RFC:

        https://tools.ietf.org/id/draft-dalal-deprecation-header-01.html
      schema:
        type: string
        format: date-time
      example: '2021-07-01T00:00:00Z'

    SunsetHeader:
      description: >
        A header containing the date of when the underlying endpoint will be
        removed. This header is only present if the endpoint has been deprecated.
        Please refer to the RFC for more information:

        https://datatracker.ietf.org/doc/html/rfc8594
      schema:
        type: string
        format: date-time
      example: '2021-08-02T00:00:00Z'

    RequestIdResponseHeader:
      description: >
        A header containing a unique id used for tracking this request. If you
        are reporting an issue to Snyk it's very helpful to provide this ID.
      schema:
        type: string
        format: uuid
      example: 4b58e274-ec62-4fab-917b-1d2c48d6bdef

    InternalGlooNormalizedPathHeader:
      x-snyk-internal: true
      description: >
        An internal header used by Snyk's API-Gateway for analytics.
      schema:
        type: string

    InternalGlooOrgIdHeader:
      x-snyk-internal: true
      description: >
        An internal header used by Snyk's API-Gateway for analytics.
      schema:
        type: string
        format: uuid

    LocationHeader:
      description: >
        A header providing a URL for the location of a resource
      schema:
        type: string
        format: url
      example: https://example.com/resource/4

  parameters:
    OrgId:
      name: org_id
      in: path
      required: true
      description: The ID of the organization.
      schema:
        type: string
        format: uuid
      example: ed0f3ec8-2c83-46c8-a154-de0e5ea77419

  schemas:
    AnalyticsRequestBody:
      type: object
      required:
        - data
      properties:
        data:
          $ref: "#/components/schemas/AnalyticsData"

    AnalyticsData:
      type: object
      required:
        - type
        - attributes
      properties:
        type:
          type: string
          description: The type of data ("analytics").
        attributes:
          $ref: "#/components/schemas/AnalyticsAttributes"

    AnalyticsAttributes:
      type: object
      required:
        - interaction
      properties:
        interaction:
          $ref: "#/components/schemas/Interaction"
        runtime:
          $ref: "#/components/schemas/Runtime"

    Interaction:
      type: object
      required:
        - id
        - timestamp_ms
        - type
        - status
        - target
      properties:
        id:
          type: string
          format: uri
          description: >
            The client-generated ID of the interaction event in the form of 
            `urn:snyk:interaction:00000000-0000-0000-0000-000000000000`
        timestamp_ms:
          type: integer
          format: int64
          description: The timestamp in epoch milliseconds when the interaction was started in UTC (Zulu time).
        stage:
          type: string
          description: The stage of the SDLC where the Interaction occurred, such as"dev"|"cicd"|"prchecks"|"unknown".
          enum: ['dev', 'cicd', 'prchecks', 'unknown']
        type:
          type: string
          description: >
            The type of interaction, could be "Scan done". Scan Done indicates that a test was run no 
            matter if the CLI or IDE ran it, other types can be freely chosen types.
        categories:
          type: array
          items:
            type: string
          description: The category vector used to describe the interaction in detail, "oss","test".
        status:
          type: string
          description: >
            Status would be "success" or "failure", where success means the action was executed, 
            while failure means it didn't run.
        results:
          type: array
          description: >
            The result of the interaction. Could be a something like this [{"name": "critical", "count": 0}].
            
            Only strings, integers, and boolean values are allowed.
          items:
            type: object
            additionalProperties: true
        target:
          $ref: "#/components/schemas/Target"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/InteractionError"

        extension:
          type: object
          description: |
            Optional additional extension.
            
            Only strings, integers, and boolean values are allowed.
          additionalProperties: true

    Runtime:
      type: object
      properties:
        application:
          $ref: "#/components/schemas/Application"
        integration:
          $ref: "#/components/schemas/Integration"
        environment:
          $ref: "#/components/schemas/Environment"
        platform:
          $ref: "#/components/schemas/Platform"
        performance:
          $ref: "#/components/schemas/Performance"

    Target:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uri
          description: |
            A purl is a URL composed of seven components.
            scheme:type/namespace/name@version?qualifiers#subpath
            
            The purl specification is available here:
            
            `https://github.com/package-url/purl-spec`
            
            Some purl examples
            
            `pkg:github/package-url/purl-spec@244fd47e07d1004f0aed9c`
            
            `pkg:npm/%40angular/animation@12.3.1`
            
            `pkg:pypi/django@1.11.1`

    InteractionError:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: |
            Error identifier corresponding to the errors defined in the error catalog.
            
            `https://docs.snyk.io/scan-with-snyk/error-catalog`
        code:
          type: string
          description: The HTTP specific error code.

    Application:
      type: object
      required:
        - name
        - version
      description: >
        The application name, e.g. snyk-ls.
        The version of the integration.
      properties:
        name:
          type: string
        version:
          type: string

    Integration:
      type: object
      required:
        - name
        - version
      description: >
        TODO UPDATE with correct samples of integration name.
        The name of the integration, could be a plugin or extension (e.g. Snyk Security plugin for intelliJ).
        The version of the integration (2.3.4).
      properties:
        name:
          type: string
        version:
          type: string

    Environment:
      type: object
      required:
        - name
        - version
      description: >
        The environment for the integration (e.g., IntelliJ Ultimate, Pycharm).
        The version of the integration environment (e.g. 2023.3)
      properties:
        name:
          type: string
        version:
          type: string

    Platform:
      type: object
      required:
        - os
        - arch
      description: The operating system and the architecture (AMD64, ARM64, 386, ALPINE).
      properties:
        os:
          type: string
        arch:
          type: string

    Performance:
      type: object
      required:
        - duration_ms
      description: The scan duration in milliseconds
      properties:
        duration_ms:
          type: integer
          format: int64

    JsonApi:
      type: object
      properties:
        version:
          type: string
          pattern: '^(0|[1-9]\d*)\.(0|[1-9]\d*)$'
          description: Version of the JSON API specification this server supports.
          example: '1.0'
      required: ['version']
      additionalProperties: false
      example:
        version: '1.0'

    ErrorLink:
      type: object
      description: A link that leads to further details about this particular occurrance of the problem.
      properties:
        about: { $ref: '#/components/schemas/LinkProperty' }
      additionalProperties: false
      example:
        about: 'https://example.com/about_this_error'

    LinkProperty:
      oneOf:
        - type: string
          description: A string containing the link’s URL.
          example: 'https://example.com/api/resource'
        - type: object
          properties:
            href:
              type: string
              description: A string containing the link’s URL.
              example: 'https://example.com/api/resource'
            meta: { $ref: '#/components/schemas/Meta' }
          required: ['href']
          additionalProperties: false
          example:
            href: 'https://example.com/api/resource'
      example: 'https://example.com/api/resource'

    Meta:
      type: object
      description: Free-form object that may contain non-standard information.
      example:
        key1: value1
        key2:
          sub_key: sub_value
        key3: [array_value1, array_value2]
      additionalProperties: true
      properties: {}

    ErrorDocument:
      type: object
      properties:
        jsonapi: { $ref: '#/components/schemas/JsonApi' }
        errors:
          type: array
          items: { $ref: '#/components/schemas/Error' }
          minItems: 1
          example:
            - status: '403'
              detail: Permission denied for this resource
      additionalProperties: false
      required: ['jsonapi', 'errors']
      example:
        jsonapi:
          version: '1.0'
        errors:
          - status: '403'
            detail: Permission denied for this resource

    Error:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: 'A unique identifier for this particular occurrence of the problem.'
          example: f16c31b5-6129-4571-add8-d589da9be524
        links: { $ref: '#/components/schemas/ErrorLink' }
        status:
          type: string
          pattern: '^[45]\d\d$'
          description: 'The HTTP status code applicable to this problem, expressed as a string value.'
          example: '400'
        detail:
          type: string
          description: 'A human-readable explanation specific to this occurrence of the problem.'
          example: 'The request was missing these required fields: ...'
        code:
          type: string
          description: 'An application-specific error code, expressed as a string value.'
          example: 'entity-not-found'
        title:
          type: string
          description: 'A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.'
          example: 'Bad request'
        source:
          type: object
          properties:
            pointer:
              type: string
              description: 'A JSON Pointer [RFC6901] to the associated entity in the request document.'
              example: /data/attributes
            parameter:
              type: string
              description: 'A string indicating which URI query parameter caused the error.'
              example: 'param1'
          additionalProperties: false
          example:
            pointer: /data/attributes
        meta:
          type: object
          additionalProperties: true
          example:
            key: value
          properties: {}
      required: ['status', 'detail']
      additionalProperties: false
      example:
        status: '404'
        detail: 'Not Found'

    QueryVersion:
      type: 'string'
      description: 'Requested API version'
      pattern: '^(wip|work-in-progress|experimental|beta|((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?))$'

    ActualVersion:
      type: string
      description: Resolved API version
      pattern: '^((([0-9]{4})-([0-1][0-9]))-((3[01])|(0[1-9])|([12][0-9]))(~(wip|work-in-progress|experimental|beta))?)$'

  responses:
    '204':
      description: 'The operation completed successfully with no content'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }

    '400':
      description: 'Bad Request: A parameter provided as a part of the request was invalid.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }

    '401':
      description: 'Unauthorized: the request requires an authentication token.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }

    '403':
      description: 'Forbidden: the request requires an authentication token with more or different permissions.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }

    '404':
      description: 'Not Found: The resource being operated on could not be found.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }

    '409':
      description: 'Conflict: The requested operation conflicts with the current state of the resource in some way.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }

    '500':
      description: 'Internal Server Error: An error was encountered while attempting to process the request.'
      headers:
        snyk-version-requested:
          { $ref: '#/components/headers/VersionRequestedResponseHeader' }
        snyk-version-served:
          { $ref: '#/components/headers/VersionServedResponseHeader' }
        snyk-request-id:
          { $ref: '#/components/headers/RequestIdResponseHeader' }
        snyk-version-lifecycle-stage:
          { $ref: '#/components/headers/VersionStageResponseHeader' }
        deprecation: { $ref: '#/components/headers/DeprecationHeader' }
        sunset: { $ref: '#/components/headers/SunsetHeader' }
      content:
        application/vnd.api+json:
          schema: { $ref: '#/components/schemas/ErrorDocument' }